nrow(start)
count(start)
unique(start)
ncol(start)
length(start)
# Count the number of subjects/sessions in the file
totalSubj = length(which(rawdata$Time == 0))
c(1:totalSubj)
summary(rawdata)
rawdata[1:5]
rawdata[,1:5]
rawdata[1:5,]
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[1]:end[i], ]
temp
# save temp data with appropriate filename
}
start
end
start[0]
start[1]
start[2]
end
i = 1
rawdata[start[1]:end[i], ]
for (i in c(1:length(start))) {
temp <- rawdata[start[1]:end[i], ]
print(temp)
# save temp data with appropriate filename
}
temp = rawdata[start[1]:end[i], ]
# for each subject
for (i in c(1:length(start))) {
temp = rawdata[start[1]:end[i], ]
print(temp)
# save temp data with appropriate filename
}
rm(temp)
# for each subject
for (i in c(1:length(start))) {
temp = rawdata[start[1]:end[i], ]
print(temp)
rm(temp)
# save temp data with appropriate filename
}
# rm(temp)
# for each subject
for (i in c(1:length(start))) {
temp = rawdata[start[i]:end[i], ]
print(temp)
# rm(temp)
# save temp data with appropriate filename
}
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
print(temp)
# save temp data with appropriate filename
}
temp$Subject[1]
SubjectNum = temp$Subject[1]
RunNumber = temp$Run[1]
c(prefix,SubjectNum,RunNumber)
paste(c(prefix,SubjectNum,RunNumber), sep = "_")
paste(c(prefix,SubjectNum,RunNumber), collapse = "_")
paste(c(prefix,, "Rat",RunNumber,"Run"), collapse = "_")
paste(c(prefix, "Rat",RunNumber,"Run"), collapse = "_")
paste(c(prefix, "Rat", SubjectNum, "Run",RunNumber), collapse = "_")
filepath <- here("rawdata", "Marios",'ConditionedReinforcement', paste(tempfilename, ".csv"))
tempfilename <- paste(c(prefix, "Rat", SubjectNum, "Run",RunNumber), collapse = "_")
filepath <- here("rawdata", "Marios",'ConditionedReinforcement', paste(tempfilename, ".csv"))
filepath
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
print(temp)
# save temp data with appropriate filename
SubjectNum = temp$Subject[1]
RunNumber = temp$Run[1]
tempfilename <- paste(c(prefix, "Rat", SubjectNum, "Run",RunNumber), collapse = "_")
filepath <- here("rawdata", "Marios",'ConditionedReinforcement', paste(tempfilename, ".csv"))
write_csv(temp, filepath)
}
tempfilename
aste(tempfilename, ".csv")
paste(tempfilename, ".csv")
paste(tempfilename, ".csv", sep = "")
filename <- "CRF_MagTrain_Sess1.txt"
folderpath <- here("rawdata", "Marios",'ConditionedReinforcement')
filepath <- here(folderpath, filename)
filepath
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
# save temp data with appropriate filename
SubjectNum = temp$Subject[1]
RunNumber = temp$Run[1]
tempfilename <- paste(c(prefix, "Rat", SubjectNum, "Run",RunNumber), collapse = "_")
tempfilename <- paste(tempfilename, ".csv", sep = "")
filepath <- here(folderpath, tempfilename)
write_csv(temp, filepath)
}
a = CRF_MagTrain_Sess1_Rat_9______Run_1
a = "CRF_MagTrain_Sess1_Rat_9______Run_1"
str_split(filename, ".txt")
strsplit(a,"_")
b = strsplit(a,"_")
b
b[[1]]
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
# save temp data with appropriate filename
SubjectNum = temp$Subject[1]
RunNumber = temp$Run[1]
tempfilename <- paste(c(prefix, "Rat", SubjectNum, "Run",RunNumber), collapse = "")
tempfilename <- paste(tempfilename, ".csv", sep = "")
filepath <- here(folderpath, tempfilename)
write_csv(temp, filepath)
}
filename
str_replace_all(filename, "_", "")
# Grab filename for naming convention and combine with subject number
prefix <- strsplit(filename, ".txt")
prefix <- prefix[[1]]
prefix <- str_replace_all(prefix, "_", "")
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
# save temp data with appropriate filename
SubjectNum = temp$Subject[1]
RunNumber = temp$Run[1]
tempfilename <- paste(c(prefix, "Rat", SubjectNum, "Run",RunNumber), collapse = "_")
tempfilename <- paste(tempfilename, ".csv", sep = "")
filepath <- here(folderpath, tempfilename)
write_csv(temp, filepath)
}
# save temp data with appropriate filename
SubjectNum = paste(c("Rat", temp$Subject[1]), collapse = "")
SubjectNum
SubjectNum = paste(c("Rat", temp$Subject[1]), collapse = "")
SubjectNum = str_replace_all(SubjectNum, "_", "")
SubjectNum
# Grab filename for naming convention and combine with subject number
prefix <- strsplit(filename, ".txt")
prefix <- prefix[[1]]
prefix <- str_replace_all(prefix, "_", "")
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
# save temp data with appropriate filename
SubjectNum = paste(c("Rat", temp$Subject[1]), collapse = "")
SubjectNum = str_replace_all(SubjectNum, "_", "")
RunNumber = paste(c("Run", temp$Run[1], collapse = ""))
RunNumber = str_replace_all(RunNumber, "_", "")
tempfilename <- paste(c(prefix, SubjectNum,RunNumber), collapse = "_")
tempfilename <- paste(tempfilename, ".csv", sep = "")
filepath <- here(folderpath, tempfilename)
write_csv(temp, filepath)
}
# Grab filename for naming convention and combine with subject number
prefix <- strsplit(filename, ".txt")
prefix <- prefix[[1]]
prefix <- str_replace_all(prefix, "_", "")
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
# save temp data with appropriate filename
SubjectNum = paste(c("Rat", temp$Subject[1]), collapse = "")
SubjectNum = str_replace_all(SubjectNum, "_", "")
RunNumber = paste(c("Run", temp$Run[1], collapse = ""))
tempfilename <- paste(c(prefix, SubjectNum,RunNumber), collapse = "_")
tempfilename <- paste(tempfilename, ".csv", sep = "")
filepath <- here(folderpath, tempfilename)
write_csv(temp, filepath)
}
RunNumber
RunNumber = paste(c("Run", temp$Run[1], collapse = ""))
RunNumber
temp$Run[1]
RunNumber = paste(c("Run", temp$Run[1]), collapse = "")
RunNumber
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
# save temp data with appropriate filename
# Clean SubjNumber
SubjectNum = paste(c("Rat", temp$Subject[1]), collapse = "")
SubjectNum = str_replace_all(SubjectNum, "_", "")
RunNumber = paste(c("Run", temp$Run[1]), collapse = "")
# Clean RUn number
tempfilename <- paste(c(prefix, SubjectNum,RunNumber), collapse = "_")
tempfilename <- paste(tempfilename, ".csv", sep = "")
filepath <- here(folderpath, tempfilename)
write_csv(temp, filepath)
}
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
# save temp data with appropriate filename
# Clean SubjNumber
SubjectNum = paste(c("Rat", temp$Subject[1]), collapse = "")
SubjectNum = str_replace_all(SubjectNum, "_", "")
RunNumber = paste(c("Run", temp$Run[1]), collapse = "")
# Clean RUn number
tempfilename <- paste(c(prefix, SubjectNum,RunNumber), collapse = "_")
tempfilename <- paste(tempfilename, ".csv", sep = "")
filepath <- here(folderpath, tempfilename)
write_csv(temp, filepath)
}
read_csv(here(filepath))
colnames(rawdata)
colnames(rawdata)
names(rawdata)[12] <- "LLR_On"
names(rawdata)[13] <- "RLR_On"
names(rawdata)[14] <- "Mag_On"
names(rawdata)[15] <- "A4_On"
names(rawdata)[16] <- "LLR_Off"
names(rawdata)[17] <- "RLR_Off"
names(rawdata)[18] <- "Mag_Off"
names(rawdata)[19] <- "A4_Off"
View(rawdata)
# Read in data file -------------------------------------------------------
filename <- "CRF_MagTrain_Sess1.txt"
folderpath <- here("rawdata", "Marios",'ConditionedReinforcement')
filepath <- here(folderpath, filename)
# Coulbourn files are tab separated value .txt files
rawdata <- read_tsv(filepath)
# Clean up column naming conventions - Assumes 4 response options on Coulbourn setup
names(rawdata)[12] <- "LLR_On"
names(rawdata)[13] <- "RLR_On"
names(rawdata)[14] <- "Mag_On"
names(rawdata)[15] <- "A4_On"
names(rawdata)[16] <- "LLR_Off"
names(rawdata)[17] <- "RLR_Off"
names(rawdata)[18] <- "Mag_Off"
names(rawdata)[19] <- "A4_Off"
# Separate subjects -------------------------------------------------------
# Coulbourn will put all the data you have asked for in a long format stack with subjects changing after a variable number of columns
## Note that if you try and extract by identifying unique subjects you might accidentally ignore that a subject was run multiple times
## Instead, Coulbourn timetsamps always start at t = 0, so this can be used to identify the indices of every new subject
# Start and end indices of each subject
start = which(rawdata$Time == 0)
end = start -1
end = end[-1]
end = c(end, nrow(rawdata))
# Grab filename for naming convention and combine with subject number
prefix <- strsplit(filename, ".txt")
prefix <- prefix[[1]]
prefix <- str_replace_all(prefix, "_", "")
# for each subject
for (i in c(1:length(start))) {
temp <- rawdata[start[i]:end[i], ]
# save temp data with appropriate filename
# Clean SubjNumber
SubjectNum = paste(c("Rat", temp$Subject[1]), collapse = "")
SubjectNum = str_replace_all(SubjectNum, "_", "")
RunNumber = paste(c("Run", temp$Run[1]), collapse = "")
# Clean RUn number
tempfilename <- paste(c(prefix, SubjectNum,RunNumber), collapse = "_")
tempfilename <- paste(tempfilename, ".csv", sep = "")
filepath <- here(folderpath, tempfilename)
write_csv(temp, filepath)
}
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/CoulbournDataExtraction.R')
# Title: CoulbournDataANalysis
## Author: Marios Panayi
## Date: 16-DEC-2020
## Purpose: Analyze Extracted [i.e. individual] data from Coulbourn boxes
## Notes: Data from NIDA Pilots
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
# Package for relative file paths
library(here)
# library(ggpubr)
library(cowplot)
library(ggsignif)
library(patchwork)
library(RColorBrewer)
## Packages for Data analysis
library(afex)
afex_options(emmeans_model = "multivariate")# use multivariate model for all follow-up tests.
library(emmeans)
# install.packages("devtools")
# devtools::install_github("crsh/papaja")
# library(papaja)
# library(knitr)
# remotes::install_github("noamross/redoc")
# library(redoc)
filename <- "CRFMagTrainSess1_Rat10_Run1.csv"
folderpath <- here("rawdata", "Marios",'ConditionedReinforcement')
filepath <- here(folderpath, filename)
read_csv(filepath)
## List of states
S = c(1 = "ITI",
2 = "Pre",
3 = "Pel")
## List of states
S = c(1 = "ITI",
2 = "Pre",
3 = "Pel")
## List of states
S = c("ITI" = 1,
"Pre" = 2,
"Pel" = 3)
s[pre]
s["pre"]
s[3]
S["pre"]
S["Pre"]
S[2]
S["Pel"]
## Read in data
rawdata <- read_csv(filepath)
# remotes::install_github("noamross/redoc")
# library(redoc)
# Load Individual File ----------------------------------------------------
## Set file path
filename <- "CRFMagTrainSess1_Rat10_Run1.csv"
folderpath <- here("rawdata", "Marios",'ConditionedReinforcement')
filepath <- here(folderpath, filename)
## Read in data
rawdata <- read_csv(filepath)
## List of states
S = c("ITI" = 1,
"Pre" = 2,
"Pel" = 3)
## Time base the linc was set to, in ms
timebase = 20
## Set file path
filename <- "CRFMagTrainSess1_Rat10_Run1.csv"
folderpath <- here("rawdata", "Marios",'ConditionedReinforcement')
filepath <- here(folderpath, filename)
## Read in data
rawdata <- read_csv(filepath)
## List of states
S = c("ITI" = 1,
"Pre" = 2,
"Pel" = 3)
## Time base the linc was set to, in ms
timebase = 20
rawdata$`Transition State` == 1
which(rawdata$`Transition State` == 1)
which(rawdata$`Transition State` == -1)
c(which(rawdata$`Transition State` == 1), which(rawdata$`Transition State` == -1))
### Identify the start time of each trial, and the final end state
c(which(rawdata$`Transition State` == s["ITI"]), which(rawdata$`Transition State` == -1))
s["ITI"]
### Identify the start time of each trial, and the final end state
c(which(rawdata$`Transition State` == S["ITI"]), which(rawdata$`Transition State` == -1))
totalTrials <- length(trialTimes)
### Identify the start time of each trial, and the final end state (indicated by -1 in Coulbourn)
trialTimes <- c(which(rawdata$`Transition State` == trialstartstate), which(rawdata$`Transition State` == -1))
totalTrials <- length(trialTimes)
### Identify the start time of each trial, and the final end state (indicated by -1 in Coulbourn)
trialTimes <- c(which(rawdata$`Transition State` == trialstartstate), which(rawdata$`Transition State` == -1))
## Identify state that trials start in, usually the ITI ;)
trialstartstate = S["ITI"]
## Add a column to the data set indicating trial number
### Identify the start time of each trial, and the final end state (indicated by -1 in Coulbourn)
trialTimes <- c(which(rawdata$`Transition State` == trialstartstate), which(rawdata$`Transition State` == -1))
totalTrials <- length(trialTimes)
trialTimes
totalTrials
totalTrials <- length(trialTimes) - 1
i = 1
c(trialTimes[i]:(trialTimes[i+1]-1))
i = 2
c(trialTimes[i]:(trialTimes[i+1]-1))
for (i in c(1:totalTrials)) {
trialNum[c(trialTimes[i]:(trialTimes[i+1]-1))] = i
}
length(rawdata)
length(rawdata,2)
nrows(rawdata)
nrow(rawdata)
trialNum <- replicate(nrow(rawdata),0)
for (i in c(1:totalTrials)) {
trialNum[c(trialTimes[i]:(trialTimes[i+1]-1))] = i
}
## Initialise trialnum variable with 0s for every row
trialNum <- replicate(nrow(rawdata),0)
for (i in c(1:totalTrials)) {
trialNum[c(trialTimes[i]:(trialTimes[i+1]-1))] = i
}
trialNum
cbind(rawdata,trialNum)
View(rawdata)
rawdata <- cbind(rawdata,trialNum)
5*20
1000/20
100/20
100*20
/1000
2000/1000
1000/20
3347*20
/1000
66940/1000
rawdata %>%
mutate(Time = (Time*timebinwidth)/1000)
rawdata %>%
mutate(Time = (Time*timebinwidth)/1000)
rawdata %>%
mutate(Time1 = (Time*timebinwidth)/1000)
# Title: CoulbournDataANalysis_Frequency_PerTrial_1sBins
## Author: Marios Panayi
## Date: 16-DEC-2020
## Purpose: Analyze Extracted [i.e. individual] data from Coulbourn boxes
## Notes: Data from NIDA Pilots
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
# Package for relative file paths
library(here)
# library(ggpubr)
library(cowplot)
library(ggsignif)
library(patchwork)
library(RColorBrewer)
## Packages for Data analysis
library(afex)
afex_options(emmeans_model = "multivariate")# use multivariate model for all follow-up tests.
library(emmeans)
# install.packages("devtools")
# devtools::install_github("crsh/papaja")
# library(papaja)
# library(knitr)
# remotes::install_github("noamross/redoc")
# library(redoc)
rawdata %>%
mutate(Time1 = (Time*timebinwidth)/1000)
rawdata %>%
mutate(Time1 = Time*timebinwidth/1000)
rawdata
rawdata %>%
mutate(Time1 = Time*timebase/1000)
rawdata %>%
mutate(Time = Time*timebase/1000)
# Load Individual File ----------------------------------------------------
## Set file path
filename <- "CRFMagTrainSess1_Rat10_Run1.csv"
folderpath <- here("rawdata", "Marios",'ConditionedReinforcement')
filepath <- here(folderpath, filename)
## Read in data
rawdata <- read_csv(filepath)
# Set parameters ----------------------------------------------------------
## List of states
S = c("ITI" = 1,
"Pre" = 2,
"Pel" = 3)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 1
## States not to bin
nobin = c("ITI" = 1)
# Change time units to seconds --------------------------------------------
rawdata %>%
mutate(Time = Time*timebase/1000)
# Calculate Trials --------------------------------------------------------
## Identify state that trials start in, usually the ITI ;)
trialstartstate = S["ITI"]
## Add a column to the data set indicating trial number
### Identify the start time of each trial, and the final end state (indicated by -1 in Coulbourn)
trialTimes <- c(which(rawdata$`Transition State` == trialstartstate), which(rawdata$`Transition State` == -1))
totalTrials <- length(trialTimes) - 1
## Initialise trialnum variable with 0s for every row
trialNum <- replicate(nrow(rawdata),0)
for (i in c(1:totalTrials)) {
trialNum[c(trialTimes[i]:(trialTimes[i+1]-1))] = i
}
## append trial counter to dataframe
rawdata <- cbind(rawdata,trialNum)
## States not to bin
nobin = S["ITI"]
S["ITI"]
bin = c(s["Pre"], s["Pel"])
bin = c(S["Pre"], S["Pel"])
bin
for (i in c(1:totalTrials)) {
trialIdx = c(trialTimes[i]:(trialTimes[i+1]-1))
trialNum[trialIdx] = i
}
which(rawdata$`Transition State` == bin)
match(rawdata$`Transition State`, bin)
which(match(rawdata$`Transition State`, bin))
which(match(rawdata$`Transition State`, bin) != NA)
which(match(rawdata$`Transition State`))
which(match(rawdata$`Transition State`, bin))
match(rawdata$`Transition State`, bin)
logical(match(rawdata$`Transition State`, bin))
is.na(match(rawdata$`Transition State`, bin))
!is.na(match(rawdata$`Transition State`, bin))
which(!is.na(match(rawdata$`Transition State`, bin)))
statechange_idx = which(rawdata$`Transition State` !=0)
statechange_idx
statechange_idx = which(rawdata$`Transition State` !=0)
statechange_ID = rawdata$`Transition State`[statechange_idx]
statechange_ID
statechange_trialNUm = rawdata$trialNum
statechange_trialNUm
statechange_trialNUm = rawdata$trialNum[statechange_idx]
statechange_trialNUm
statechange_idx
cbind(statechange_idx,statechange_ID,statechange_trialNUm)
data.frame(statechange_idx,statechange_ID,statechange_trialNUm)
rawdata
