protocol <- replicate(length(bin_trial), rawdata$Protocol[1])
station <- replicate(length(bin_trial), rawdata$Station[1])
run <- replicate(length(bin_trial), rawdata$Run[1])
project <- replicate(length(bin_trial), rawdata$Project[1])
userID <- replicate(length(bin_trial), rawdata$UserID[1])
session <- replicate(length(bin_trial), rawdata$Session[1])
## Combine all the data together
data_bin <- data.table(folder, file, savename, subject, protocol, station, run, project, userID, session, bin_trial, bin_state, bin_time, bin_timewithin, data_bin)
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
# Package for relative file paths
library(here)
# Load Analysis Functions
source(here("scripts", "CoulbournAnalysisFunctions.R"))
# Identify files to analyze
# Can't use here() function effectively here, so have to create relative file paths
## COllapses multiple subfolders if needed
datafoldersinproject1 <- c("rawdata")
datafoldersinproject2 <-c("Marios")
## Project specific folder
projectdatafolder <- c("3_LeverPressingForLights")
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("LPL_Devaluation1_Test_Day13",
"LPL_Devaluation2_Test_Day14")
#  extract data filenames, only .txt --------------------------------------
datafilepaths <-0
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".txt")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function
coulbourn_rawdatasplit(filename,folderpath)
}
#  extract processed data filenames, only .csv and put them into a --------
########## Set parameters ############
## List of states
S = c("Test_NonReinforced" = 1,
"ITI" = 2,
"Test_Reinforced" = 3,
"Flash" = 4,
"Steady" = 5,
"End" = 6)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 1
## States to bin and which not to bin
nobin = c(S["End"], S["ITI"], S["Test_NonReinforced"])
bin = c( S["Flash"], S["Steady"])
## Identify state that trials start in, Here These are states that occur after a 'successful' operant response
trialstartstate = c(S["Test_Reinforced"])
## Time bin pre and post target states of interest, in seconds
prebintime <- 5
postbintime <- 5
########## Run Analysis ############
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into individudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Instrumental_PrePosttimebin(filename,folderpath,S,timebase, timebinwidth, nobin, bin, trialstartstate, prebintime, postbintime)
}
# Combine all data --------------------------------------------------------
#create list of all filenames
filestojoin <- "0"
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i],"Processed_TimeBin",  sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv", full.names = TRUE)
filestojoin <- c(filestojoin, datafilepaths)
# for (j in c(1:length(datafilepaths))) {
#
#   # For each processed .csv file, load the data and then join it together
#   filename <- datafilepaths[j]
#   ## Load and analyse
}
#delete initialising variable
filestojoin <- filestojoin[-1]
## Load each table of data and join into a single
for (i in c(1:length(filestojoin))){
if (i == 1){
rawdata <- read_csv(filestojoin[i])
} else {
tempdata <- read_csv(filestojoin[i])
rawdata <- full_join(rawdata,tempdata)
}
# Recode COunterbalancing information -----------------------------------
## Solution: create a counterbalancing data frame and then left_join() with the rawdata to match all relevant rows on Subject[Make sure subject is labelled the same in both tables]
subject <- c("17____",
"18____",
"19____",
"20____",
"21____",
"22____",
"42____",
"43____",
"44____",
"23____",
"24____",
"25____")
counterbalancing <- c("A",
"B",
"A",
"B",
"A",
"B",
"A",
"B",
"A",
"B",
"B")
Pavlovian_cbx <-  c("X",
"X",
"Y",
"X",
"Y",
"X",
"Y",
"Y")
sex <- c("F",
"F",
"M",
"F",
"F")
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_2_CRFrats_Novel4LightAcquisition.R', echo=TRUE)
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
library(data.table)
# Package for relative file paths
library(here)
# # Benchmark time of functions and analyze time profile of functions
# library(microbenchmark)
# library(profvis)
# Load Analysis Functions
source(here("scripts", "CoulbournAnalysisFunctions.R"))
# Packages for parallel computing siginificantly speeds things up
library(foreach)
library(doParallel)
numCores = 16
registerDoParallel(numCores)
# Identify files to analyze
## COllapses multiple subfolders if needed
### Project specific folder
projectdatafolder <- c("rawdata","Marios","2_ConditionedReinforcement")
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("NovelLightCues_Acquisition_Day1",
"NovelLightCues_Acquisition_Day2",
"NovelLightCues_Acquisition_Day3",
)
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("NovelLightCues_Acquisition_Day1",
"NovelLightCues_Acquisition_Day2",
"NovelLightCues_Acquisition_Day3",
)
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("NovelLightCues_Acquisition_Day1",
"NovelLightCues_Acquisition_Day2",
"NovelLightCues_Acquisition_Day3")
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_2_CRFrats_Novel4LightAcquisition.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_2_CRF_NovelLights.R', echo=TRUE)
Acqsuisition_Stage1_MagFreq <- data_PerSession_CSPre %>%
filter(Period == "CSPre") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagEntries, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
# facet_wrap(~ sex) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
facet_wrap(~counterbalancing, ) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Entry 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-2,3.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagFreq <- shift_xaxis_facet(Acqsuisition_Stage1_MagFreq)
Acqsuisition_Stage1_MagFreq
view(data_PerSession_CSPre)
##### Load relevant packages ----
## Packages for data organisation and plotting
library(tidyverse)
# Package for relative file paths
library(here)
library(ggpubr)
library(cowplot)
library(ggsignif)
library(patchwork)
library(RColorBrewer)
## Packages for Data analysis
library(afex)
afex_options(emmeans_model = "multivariate")# use multivariate model for all follow-up tests.
library(emmeans)
# install.packages("devtools")
# devtools::install_github("crsh/papaja")
# library(papaja)
# library(knitr)
# remotes::install_github("noamross/redoc")
# library(redoc)
#### Plot functions ====
# modified from from:
# https://stackoverflow.com/questions/39071002/moving-x-or-y-axis-together-with-tick-labels-to-the-middle-of-a-single-ggplot-n
# Learn more here
# https://www.stat.auckland.ac.nz/~paul/useR2015-grid/grid-slides.html
# https://bookdown.org/rdpeng/RProgDA/the-grid-package.html#grobs
shift_xaxis_facet <- function(p, y=0){
g <- ggplotGrob(p)
dummy <- data.frame(y=y)
# Identify axis elements - use this to find and move other elements
ax <- g[["grobs"]][g$layout$name == "axis-b-1-1"][[1]]
# plot grid as an annotation
# grobTree combines all the elements of the axis into a single grob (vp = vertical position)
# Viewport defines a rectangular window
p + annotation_custom(grid::grobTree(ax, vp = grid::viewport(y=1, height=sum(ax$height))),
ymax=y, ymin=y) +
geom_hline(aes(yintercept=y), data = dummy) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
}
shift_xaxis <- function(p, y=0){
g <- ggplotGrob(p)
dummy <- data.frame(y=y)
# Identify axis elements - use this to find and move other elements
ax <- g[["grobs"]][g$layout$name == "axis-b"][[1]]
# plot grid as an annotation
# grobTree combines all the elements of the axis into a single grob (vp = vertical position)
# Viewport defines a rectangular window
p + annotation_custom(grid::grobTree(ax, vp = grid::viewport(y=1, height=sum(ax$height))),
ymax=y, ymin=y) +
geom_hline(aes(yintercept=y), data = dummy) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank())
}
# Plot Style Parameters ---------------------------------------------------
## Define Colours to be used
DarkRed     = "#67001F"
MediumRed   = "#B2182B"
LightRed    = "#D6604D"
DarkBlue    = "#053061"
MediumBlue  = "#2166AC"
LightBlue   = "#4393C3"
Black       = "#000000"
White       = "#ffffff"
LightGrey   = "#F0F0F0"
MediumGrey  = "#BDBDBD"
DarkGrey    = "#252525"
## Shapes for Geom_point
circle            = 21
square            = 22
diamond           = 23
triangleUp        = 24
triangleDown      = 25
fillcolours <- c("A+" = DarkRed,
"A-" = LightRed,
"B+" = DarkBlue,
"B-" = LightBlue)
linecolours <- c("A+" = DarkRed,
"A-" = MediumRed,
"B+" = DarkBlue,
"B-" = MediumBlue)
linetypes <- c("A+" = "solid",
"A-" = "dotted",
"B+" = "solid",
"B-" = "dotted")
pointshapes <- c("A+" = square,
"A-" = circle,
"B+" = square,
"B-" = circle)
# Load Data ---------------------------------------------------------------
#  Acquisition Data -------------------------------------------------------
folderpath <- here("rawdata","Marios","2_ConditionedReinforcement","CombinedData")
filename <- "CRF_NovelLightAcquisition_ProcessedData_pertrial_1sbins.csv"
rawdata <- read_csv(here(folderpath,filename))
# Fix Day factor to numeric
rawdata <- rawdata %>%
mutate(Day = as.numeric(str_remove(Day, "Day")))
data_PerTrial <- rawdata %>%
mutate(trialnumber = ceiling(bin_trial/4)) %>%
group_by(Day, counterbalancing, subject, sex, trialnumber,CS_name, Period) %>%
summarise(MagEntries = mean(A3_freq)*1,
MagDuration = mean(A3_dur)*1) %>%
ungroup()
data_PerTrial_CSPre <- data_PerTrial %>%
pivot_wider(names_from = Period,values_from = c(MagEntries, MagDuration)) %>%
mutate(MagEntries_CSPre = MagEntries_CS - MagEntries_Pre,
MagDuration_CSPre = MagDuration_CS - MagDuration_Pre) %>%
pivot_longer(c(MagEntries_CS, MagEntries_Post, MagEntries_Pre, MagDuration_CS, MagDuration_Post, MagDuration_Pre, MagEntries_CSPre, MagDuration_CSPre), names_to = c("Measure", "Period"), names_sep = "_", values_to = "Mag") %>%
pivot_wider(names_from = Measure, values_from = Mag)
data_PerSession <- rawdata %>%
group_by(Day, counterbalancing, subject, sex, CS_name, Period) %>%
summarise(MagEntries = mean(A3_freq)*10,
MagDuration = mean(A3_dur)*10) %>%
ungroup()
data_PerSession_CSPre <- data_PerSession %>%
pivot_wider(names_from = Period,values_from = c(MagEntries, MagDuration)) %>%
mutate(MagEntries_CSPre = MagEntries_CS - MagEntries_Pre,
MagDuration_CSPre = MagDuration_CS - MagDuration_Pre) %>%
pivot_longer(c(MagEntries_CS, MagEntries_Post, MagEntries_Pre, MagDuration_CS, MagDuration_Post, MagDuration_Pre, MagEntries_CSPre, MagDuration_CSPre), names_to = c("Measure", "Period"), names_sep = "_", values_to = "Mag") %>%
pivot_wider(names_from = Measure, values_from = Mag)
data_PerSession_last5s <- rawdata %>%
filter(bin_timewithin > 5) %>%
group_by(Day, counterbalancing, subject,sex, CS_name, Period) %>%
summarise(MagEntries = mean(A3_freq)*5,
MagDuration = mean(A3_dur)*5) %>%
ungroup()
data_PerSession_last5s_CSPre <- data_PerSession_last5s %>%
pivot_wider(names_from = Period,values_from = c(MagEntries, MagDuration)) %>%
mutate(MagEntries_CSPre = MagEntries_CS - MagEntries_Pre,
MagDuration_CSPre = MagDuration_CS - MagDuration_Pre) %>%
pivot_longer(c(MagEntries_CS, MagEntries_Post, MagEntries_Pre, MagDuration_CS, MagDuration_Post, MagDuration_Pre, MagEntries_CSPre, MagDuration_CSPre), names_to = c("Measure", "Period"), names_sep = "_", values_to = "Mag") %>%
pivot_wider(names_from = Measure, values_from = Mag)
data
# Acquisition Plots -------------------------------------------------------
Acqsuisition_Stage1_MagFreq <- data_PerSession_CSPre %>%
filter(Period == "CSPre") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagEntries, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
# facet_wrap(~ sex) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
facet_wrap(~counterbalancing, ) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Entry 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-2,3.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagFreq <- shift_xaxis_facet(Acqsuisition_Stage1_MagFreq)
Acqsuisition_Stage1_MagFreq
Acqsuisition_Stage1_MagFreq <- data_PerSession_CSPre %>%
filter(Period == "CS") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagEntries, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
# facet_wrap(~ sex) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
facet_wrap(~counterbalancing, ) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Entry 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-2,3.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagFreq <- shift_xaxis_facet(Acqsuisition_Stage1_MagFreq)
Acqsuisition_Stage1_MagFreq
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "CS") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
# facet_wrap(~ sex) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
facet_wrap(~counterbalancing, ) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-2,3.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur <- shift_xaxis_facet(Acqsuisition_Stage1_MagDur)
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "CSPre") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
# facet_wrap(~ sex) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
facet_wrap(~counterbalancing, ) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-2,3.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur <- shift_xaxis_facet(Acqsuisition_Stage1_MagDur)
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "Post") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
# facet_wrap(~ sex) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
facet_wrap(~counterbalancing, ) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-2,3.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur <- shift_xaxis_facet(Acqsuisition_Stage1_MagDur)
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "Post") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
# facet_wrap(~ sex) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
facet_wrap(~counterbalancing, ) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-2,6.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur <- shift_xaxis_facet(Acqsuisition_Stage1_MagDur)
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "Post") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
# facet_wrap(~ sex) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
facet_wrap(~counterbalancing, ) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-2,8.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur <- shift_xaxis_facet(Acqsuisition_Stage1_MagDur)
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagFreq <- data_PerSession_CSPre %>%
filter(Period == "Post") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagEntries, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
# facet_wrap(~ sex) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
facet_wrap(~counterbalancing, ) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Entry 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-2,8.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagFreq <- shift_xaxis_facet(Acqsuisition_Stage1_MagFreq)
Acqsuisition_Stage1_MagFreq
