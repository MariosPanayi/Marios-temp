}
}
timebinwidth
seq(from = timebinwidth, to = sessionlength, by= timebinwidth)
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
sessionlength
timebinwidth
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
sessionlength
sessionendstate
timebase
totalbins
sessionlength
timebinwidth
Time
View(rawdata)
########## Set parameters ############
## List of states
S = c("IRI" = 1,
"Flash" = 2,
"Steady" = 3,
"End" = 4)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 60
## Count the frequency and duration of these states
bin = c(S["Flash"], S["Steady"])
## state that should be considered the end of the session. For the absolute end of recording specify the number -1 [the state_ID of the finished state in Coulbourn]
sessionendstate <- S["End"]
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
View(rawdata)
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
# Load Analysis Functions
source(here("scripts", "CoulbournAnalysisFunctions.R"))
# Can't use here() function effectively here, so have to create relative file paths
## COllapses multiple subfolders if needed
datafoldersinproject1 <- c("rawdata")
datafoldersinproject2 <-c("Marios")
## Project specific folder
projectdatafolder <- c("3_LeverPressingForLights")
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("LPL_Acquisition_RR2_Day1",
"LPL_Acquisition_RR2_Day2",
"LPL_Acquisition_RR2_Day3",
"LPL_Acquisition_RR2_Day4")
datafilepaths <-0
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".txt")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function
coulbourn_rawdatasplit(filename,folderpath)
}
}
########## Set parameters ############
## List of states
S = c("IRI" = 1,
"Flash" = 2,
"Steady" = 3,
"End" = 4)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 60
## Count the frequency and duration of these states
bin = c(S["Flash"], S["Steady"])
## state that should be considered the end of the session. For the absolute end of recording specify the number -1 [the state_ID of the finished state in Coulbourn]
sessionendstate <- S["End"]
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/CoulbournAnalysisFunctions.R', echo=TRUE)
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
# Package for relative file paths
library(here)
# Load Analysis Functions
source(here("scripts", "CoulbournAnalysisFunctions.R"))
# Identify files to analyze
# Can't use here() function effectively here, so have to create relative file paths
## COllapses multiple subfolders if needed
datafoldersinproject1 <- c("rawdata")
datafoldersinproject2 <-c("Marios")
## Project specific folder
projectdatafolder <- c("3_LeverPressingForLights")
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("LPL_Acquisition_RR2_Day1",
"LPL_Acquisition_RR2_Day2",
"LPL_Acquisition_RR2_Day3",
"LPL_Acquisition_RR2_Day4")
#  extract data filenames, only .txt --------------------------------------
datafilepaths <-0
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".txt")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function
coulbourn_rawdatasplit(filename,folderpath)
}
}
#  extract processed data filenames, only .csv and put them into a --------
########## Set parameters ############
## List of states
S = c("IRI" = 1,
"Flash" = 2,
"Steady" = 3,
"End" = 4)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 60
## Count the frequency and duration of these states
bin = c(S["Flash"], S["Steady"])
## state that should be considered the end of the session. For the absolute end of recording specify the number -1 [the state_ID of the finished state in Coulbourn]
sessionendstate <- S["End"]
########## Run Analysis ############
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
# Package for relative file paths
library(here)
# Load Analysis Functions
source(here("scripts", "CoulbournAnalysisFunctions.R"))
# Identify files to analyze
# Can't use here() function effectively here, so have to create relative file paths
## COllapses multiple subfolders if needed
datafoldersinproject1 <- c("rawdata")
datafoldersinproject2 <-c("Marios")
## Project specific folder
projectdatafolder <- c("3_LeverPressingForLights")
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("LPL_Acquisition_RR2_Day1",
"LPL_Acquisition_RR2_Day2",
"LPL_Acquisition_RR2_Day3",
"LPL_Acquisition_RR2_Day4")
#  extract data filenames, only .txt --------------------------------------
datafilepaths <-0
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".txt")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function
coulbourn_rawdatasplit(filename,folderpath)
}
}
#  extract processed data filenames, only .csv and put them into a --------
########## Set parameters ############
## List of states
S = c("IRI" = 1,
"Flash" = 2,
"Steady" = 3,
"End" = 4)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 60
## Count the frequency and duration of these states
bin = c(S["Flash"], S["Steady"])
## state that should be considered the end of the session. For the absolute end of recording specify the number -1 [the state_ID of the finished state in Coulbourn]
sessionendstate <- S["End"]
########## Run Analysis ############
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
i = 1
j = 1
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
timebins
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
# Package for relative file paths
library(here)
# Load Analysis Functions
source(here("scripts", "CoulbournAnalysisFunctions.R"))
# Identify files to analyze
# Can't use here() function effectively here, so have to create relative file paths
## COllapses multiple subfolders if needed
datafoldersinproject1 <- c("rawdata")
datafoldersinproject2 <-c("Marios")
## Project specific folder
projectdatafolder <- c("3_LeverPressingForLights")
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("LPL_Acquisition_RR2_Day1",
"LPL_Acquisition_RR2_Day2",
"LPL_Acquisition_RR2_Day3",
"LPL_Acquisition_RR2_Day4")
#  extract data filenames, only .txt --------------------------------------
datafilepaths <-0
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".txt")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function
coulbourn_rawdatasplit(filename,folderpath)
}
}
#  extract processed data filenames, only .csv and put them into a --------
########## Set parameters ############
## List of states
S = c("IRI" = 1,
"Flash" = 2,
"Steady" = 3,
"End" = 4)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 60
## Count the frequency and duration of these states
bin = c(S["Flash"], S["Steady"])
## state that should be considered the end of the session. For the absolute end of recording specify the number -1 [the state_ID of the finished state in Coulbourn]
sessionendstate <- S["End"]
########## Run Analysis ############
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
# Package for relative file paths
library(here)
# Load Analysis Functions
source(here("scripts", "CoulbournAnalysisFunctions.R"))
# Identify files to analyze
# Can't use here() function effectively here, so have to create relative file paths
## COllapses multiple subfolders if needed
datafoldersinproject1 <- c("rawdata")
datafoldersinproject2 <-c("Marios")
## Project specific folder
projectdatafolder <- c("3_LeverPressingForLights")
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("LPL_Acquisition_RR2_Day1",
"LPL_Acquisition_RR2_Day2",
"LPL_Acquisition_RR2_Day3",
"LPL_Acquisition_RR2_Day4")
#  extract data filenames, only .txt --------------------------------------
datafilepaths <-0
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".txt")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function
coulbourn_rawdatasplit(filename,folderpath)
}
}
#  extract processed data filenames, only .csv and put them into a --------
########## Set parameters ############
## List of states
S = c("IRI" = 1,
"Flash" = 2,
"Steady" = 3,
"End" = 4)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 60
## Count the frequency and duration of these states
bin = c(S["Flash"], S["Steady"])
## state that should be considered the end of the session. For the absolute end of recording specify the number -1 [the state_ID of the finished state in Coulbourn]
sessionendstate <- S["End"]
########## Run Analysis ############
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Operant_SessionTimeBinAnalysis(filename,folderpath,S,timebase, timebinwidth, bin, sessionendstate)
}
}
# Combine all data --------------------------------------------------------
#create list of all filenames
filestojoin <- "0"
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i],"Processed_TimeBin",  sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv", full.names = TRUE)
filestojoin <- c(filestojoin, datafilepaths)
# for (j in c(1:length(datafilepaths))) {
#
#   # For each processed .csv file, load the data and then join it together
#   filename <- datafilepaths[j]
#   ## Load and analyse
}
#delete initialising variable
filestojoin <- filestojoin[-1]
## Load each table of data and join into a single
for (i in c(1:length(filestojoin))){
if (i == 1){
rawdata <- read_csv(filestojoin[i])
} else {
tempdata <- read_csv(filestojoin[i])
rawdata <- full_join(rawdata,tempdata)
}
}
# Recode COunterbalancing information -----------------------------------
## Solution: create a counterbalancing data frame and then left_join() with the rawdata to match all relevant rows on Subject[Make sure subject is labelled the same in both tables]
subject <- c("17____",
"18____",
"19____",
"20____",
"21____",
"22____",
"42____",
"43____",
"44____",
"23____",
"24____",
"25____")
counterbalancing <- c("A",
"B",
"A",
"B",
"A",
"B",
"A",
"B",
"A",
"A",
"B",
"B")
# Create counterbalancing lookup table
lookup_counterbalancing <- data.frame(subject, counterbalancing)
# Combine with rawdata
rawdata <- left_join(rawdata, lookup_counterbalancing, by = "subject")
###
state_ID <- c("IRI",
"Flash",
"Steady",
"End",
"Pre",
"Post")
Period <- c("IRI",
"Light",
"Light",
"End",
"Pre",
"Post")
bin_state <- c(1,
2,
3,
4,
111,
222)
# Create counterbalancing lookup table
lookup_stateIDs <- data.frame(bin_state, Period, state_ID)
# COmbine with rawdata
rawdata <- left_join(rawdata, lookup_stateIDs, by =c("bin_state"))
###
state_ID <- c("Flash",
"Steady",
"Flash",
"Steady")
CS_name <- c("Left",
"Right",
"Right",
"Left")
counterbalancing<- c("A",
"A",
"B",
"B")
# Create counterbalancing lookup table
lookup_CSname <- data.frame(counterbalancing, state_ID, CS_name)
# Combine with rawdata
rawdata <- left_join(rawdata, lookup_CSname, by = c("counterbalancing","state_ID"))
# Not the most satisfying solution, but will have to do since other methods don't appear to be working very well
rawdata <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name[Period == "Light"])[1]) %>%
ungroup()
# Calculate Session/Day number --------------------------------------------
rawdata <- rawdata %>%
mutate(folder1 = folder) %>%
separate(folder1, c(NA,"Stage","Schedule","Day"))
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_3_LPL_WithinSessionTimeBins.R', echo=TRUE)
timebin_start
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/CoulbournAnalysisFunctions.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_3_LPL_WithinSessionTimeBins.R', echo=TRUE)
5+60
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_3_LPL_WithinSessionTimeBins.R', echo=TRUE)
30/4
7.5*60
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_3_LPL_WithinSessionTimeBins.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_3_LPL_WithinSessionTimeBins.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_2_ConditionedReinforcement.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_2_CRF.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_1_SpecificCI.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_1_SpecificCI.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_1_SpecificCI.R', echo=TRUE)
