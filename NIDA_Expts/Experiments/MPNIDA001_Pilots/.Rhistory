theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-80,120.0001), xlim = c(-2, 8)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
ggplot(data = plotdata, mapping = aes(x = Pavlovian, y = Instrumental) ) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black") +
geom_smooth(method='lm', colour = DarkRed, fill = LightGrey) +
# geom_point() +
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental") +
facet_wrap(~TestCondition, scales='free') +
# ggMarginal(data = plotdata, x = "Pavlovian", y = "Instrumental", type="density") +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,20)) +
scale_x_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,2)) +
ggtitle("") + xlab("Pavlovian High Value Bias") + ylab("Instrumental High Value Bias") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-80,120.0001), xlim = c(-2, 8)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
ggplot(data = plotdata, mapping = aes(x = Pavlovian, y = Instrumental) ) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black") +
geom_smooth(method='lm', colour = DarkRed, fill = LightGrey) +
geom_point() +
facet_wrap(~TestCondition, scales='free') +
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental") +
# ggMarginal(data = plotdata, x = "Pavlovian", y = "Instrumental", type="density") +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,20)) +
scale_x_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,2)) +
ggtitle("") + xlab("Pavlovian High Value Bias") + ylab("Instrumental High Value Bias") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-80,120.0001), xlim = c(-2, 8)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
ggplot(data = plotdata, mapping = aes(x = Pavlovian, y = Instrumental) ) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black") +
geom_smooth(method='lm', colour = DarkRed, fill = LightGrey) +
geom_point() +
facet_wrap(~TestCondition, scales='free') +
# ggMarginal(data = plotdata, x = "Pavlovian", y = "Instrumental", type="density") +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,20)) +
scale_x_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,2)) +
ggtitle("") + xlab("Pavlovian High Value Bias") + ylab("Instrumental High Value Bias") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-80,120.0001), xlim = c(-2, 8)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
colour = "TestCondition")
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
color = "TestCondition", size = 3, alpha = 0.6,)
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
color = "TestCondition", size = 3, alpha = 0.6,
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
margin.plot = "boxplot",
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
color = "TestCondition", size = 3, alpha = 0.6,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.plot = "boxplot",
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", size = 3, alpha = 0.6,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.plot = "boxplot",
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", size = 3, alpha = 0.6,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2)
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", size = 3, alpha = 0.6,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", size = 3, alpha = 0.9,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.9,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
plotdata <- CRF_ALL_data_repeatTest_Pav_vs_Inst %>%
filter(Value == "PercDiff",
measure == "LP")
ggplot(data = plotdata, mapping = aes(x = Pavlovian, y = Instrumental) ) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black") +
geom_smooth(method='lm', colour = DarkRed, fill = LightGrey) +
geom_point() +
facet_wrap(~TestCondition, scales='free') +
# ggMarginal(data = plotdata, x = "Pavlovian", y = "Instrumental", type="density") +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,20)) +
scale_x_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,2)) +
ggtitle("") + xlab("Pavlovian High Value Bias") + ylab("Instrumental High Value Bias") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-80,120.0001), xlim = c(-2, 8)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
plotdata <- CRF_ALL_data_repeatTest_Pav_vs_Inst %>%
filter(Value == "Diff",
measure == "LP")
ggplot(data = plotdata, mapping = aes(x = Pavlovian, y = Instrumental) ) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black") +
geom_smooth(method='lm', colour = DarkRed, fill = LightGrey) +
geom_point() +
facet_wrap(~TestCondition, scales='free') +
# ggMarginal(data = plotdata, x = "Pavlovian", y = "Instrumental", type="density") +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,20)) +
scale_x_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,2)) +
ggtitle("") + xlab("Pavlovian High Value Bias") + ylab("Instrumental High Value Bias") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-80,120.0001), xlim = c(-2, 8)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
plotdata <- CRF_ALL_data_repeatTest_Pav_vs_Inst %>%
filter(Value == "Diff",
measure == "CS")
ggplot(data = plotdata, mapping = aes(x = Pavlovian, y = Instrumental) ) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black") +
geom_smooth(method='lm', colour = DarkRed, fill = LightGrey) +
geom_point() +
facet_wrap(~TestCondition, scales='free') +
# ggMarginal(data = plotdata, x = "Pavlovian", y = "Instrumental", type="density") +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,20)) +
scale_x_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,2)) +
ggtitle("") + xlab("Pavlovian High Value Bias") + ylab("Instrumental High Value Bias") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-80,120.0001), xlim = c(-2, 8)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
plotdata <- CRF_ALL_data_repeatTest_Pav_vs_Inst %>%
filter(Value == "Diff",
measure == "LP")
ggplot(data = plotdata, mapping = aes(x = Pavlovian, y = Instrumental) ) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black") +
geom_smooth(method='lm', colour = DarkRed, fill = LightGrey) +
geom_point() +
facet_wrap(~TestCondition, scales='free') +
# ggMarginal(data = plotdata, x = "Pavlovian", y = "Instrumental", type="density") +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,20)) +
scale_x_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,2)) +
ggtitle("") + xlab("Pavlovian High Value Bias") + ylab("Instrumental High Value Bias") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-80,120.0001), xlim = c(-2, 8)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black") +
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw()) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black")
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw()) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black")
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw()) +
geom_hline(yintercept=0, linetype="dashed", color = "black")
CRF_RepeatTest_ScatterPlot <- ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
CRF_RepeatTest_ScatterPlot
CRF_RepeatTest_ScatterPlot$sp +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black")
CRF_RepeatTest_ScatterPlot <- ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
CRF_RepeatTest_ScatterPlot$sp <- CRF_RepeatTest_ScatterPlot$sp +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black")
CRF_RepeatTest_ScatterPlot
CRF_RepeatTest_ScatterPlot <- ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
CRF_RepeatTest_ScatterPlot
CRF_RepeatTest_ScatterPlot$sp <- CRF_RepeatTest_ScatterPlot$sp +
geom_hline(yintercept = 0, linetype="dashed", color = "black") +
geom_vline(xintercept = 0, linetype="dashed", color = "black")
CRF_RepeatTest_ScatterPlot
CRF_RepeatTest_ScatterPlot$sp
CRF_RepeatTest_ScatterPlot
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_2_CRF.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_2_ConditionedReinforcement_RepeatTestSessions.R', echo=TRUE)
#  Quick plot
data_repeatTest_CBX %>%
ggplot(mapping = aes(x = as.factor(LeverCue), y = LPFreq, group = LeverCue, colour = LeverCue, fill = LeverCue)) +
stat_summary_bin(fun.data = "mean_se", geom = "bar", position = "dodge",  size = .3) +
stat_summary(fun.data = "mean_se", geom = "errorbar", position = position_dodge(width = 0.9),  width = 0,  size = .3, colour = "black", linetype = "solid", show.legend = FALSE) +
# geom_point(aes(group = subject), colour = Black) +
# geom_line(aes(group = subject), colour = Black) +
facet_wrap(~counterbalancing,) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,10)) +
ggtitle("Counterbalancing") + xlab("CS Identity") + ylab("Total LP (All Tests)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(0,60.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
# scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
# scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(0.5,"line"))
data_repeatTest_P100_HighvsLow_long
view(CRF_data_repeatTest_P100_HighVsLow_long_Avg)
view(data_repeatTest_P100_HighvsLow_long)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_2_CRF.R', echo=TRUE)
savefile <- "CRF_Acquisition_CSPre.csv"
Data_PavlovianAcq <- read_csv(here("figures", "figure_data", savefile))
Data_PavlovianAcq_summary <- Data_PavlovianAcq %>%
filter(Period == "CSPre",
Day >= 20) %>%
group_by(subject, CS_name) %>%
summarise(MagEntries = mean(MagEntries)) %>%
ungroup() %>%
pivot_wider(names_from = CS_name, values_from = MagEntries) %>%
mutate(P50_HighVsLow = `A++--` - `B+-`,
P100_HighVsLow = `C++` - `D+`,
High_100Vs50= `C++` - `A++--`,
Low_100Vs50 = `D+` - `B+-`)
CRF_ALL_data_repeatTest_long_Avg_combined <- full_join(CRF_ALL_data_repeatTest_long_Avg, Data_PavlovianAcq_summary)
CRF_ALL_data_repeatTest_Pav_vs_Inst <- CRF_ALL_data_repeatTest_long_Avg_combined  %>%
filter(Value == "Diff" | Value == "PercDiff") %>%
mutate(Instrumental = Freq,
Pavlovian = ifelse((TestCondition == "P50_HighVsLow"), P50_HighVsLow,
ifelse((TestCondition == "P100_HighVsLow"), P100_HighVsLow,
ifelse((TestCondition == "High_100Vs50"), High_100Vs50,
ifelse((TestCondition == "Low_100Vs50"), Low_100Vs50, NA) ) ) ) )
plotdata <- CRF_ALL_data_repeatTest_Pav_vs_Inst %>%
filter(Value == "Diff",
measure == "LP")
ggplot(data = plotdata, mapping = aes(x = Pavlovian, y = Instrumental) ) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
geom_vline(xintercept=0, linetype="dashed", color = "black") +
geom_smooth(method='lm', colour = DarkRed, fill = LightGrey) +
geom_point() +
facet_wrap(~TestCondition, scales='free') +
# ggMarginal(data = plotdata, x = "Pavlovian", y = "Instrumental", type="density") +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,20)) +
scale_x_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-1000,1000,2)) +
ggtitle("") + xlab("Pavlovian High Value Bias") + ylab("Instrumental High Value Bias") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-80,120.0001), xlim = c(-2, 8)) +
theme(axis.title.x=element_text(face = "bold")) +
scale_linetype_manual(name = "", values = linetypes)  +
scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
scale_shape_manual(name = "", values = pointshapes) +
scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
CRF_RepeatTest_ScatterPlot <- ggscatterhist(data = plotdata, x = "Pavlovian", y = "Instrumental",
group = "TestCondition", color = "TestCondition", shape = "circle",
size = 3, alpha = 0.8,
palette = c(DarkBlue, LightBlue, DarkRed, LightRed),
margin.params = list(fill = "TestCondition", color = "black", size = 0.2),
ggtheme = theme_bw())
CRF_RepeatTest_ScatterPlot$sp <- CRF_RepeatTest_ScatterPlot$sp +
geom_hline(yintercept = 0, linetype="dashed", color = "black") +
geom_vline(xintercept = 0, linetype="dashed", color = "black")
CRF_RepeatTest_ScatterPlot
library(ggpubr)
CRF_RepeatTest_ScatterPlot
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_2_CRF.R', echo=TRUE)
testdata_repeatTest_All_CS_Diff
testdata_repeatTest_All_LP_Diff
testdata_repeatTest_All_LP_PercDiff
CRF_ALL_data_repeatTest_long_Avg
unique(CRF_ALL_data_repeatTest_long_Avg$subject)
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="P100_HighVsLow"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="P50_HighVsLow"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="High_P100VsP50"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="High_100Vs50"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="Low_100Vs50"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="High_100Vs50"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="P100_HighVsLow"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="P50_HighVsLow"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="High_100Vs50"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="Low_100Vs50"])
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_2_CRF.R', echo=TRUE)
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="P100_HighVsLow"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="P50_HighVsLow"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="High_100Vs50"])
unique(CRF_ALL_data_repeatTest_long_Avg$subject[CRF_ALL_data_repeatTest_long_Avg$TestCondition=="Low_100Vs50"])
knitr::opts_chunk$set(echo = FALSE)
## Packages for data organisation and plotting
library(tidyverse)
# Package for relative file paths
library(here)
# library(ggpubr)
library(cowplot)
library(ggsignif)
library(patchwork)
################################################################################
## Packages for Data analysis
library(afex)
afex_options(emmeans_model = "multivariate")# use multivariate model for all follow-up tests.
library(emmeans)
# install.packages("devtools")
# devtools::install_github("crsh/papaja")
library(papaja)
library(knitr)
# remotes::install_github("noamross/redoc")
# library(redoc)
CRF_Acquisition_CSPre <- read_csv(here("figures","figure_data","CRF_Acquisition_CSPre.csv"))
CRF_Acquisition_CSPre_Last5s <- read_csv(here("figures","figure_data","CRF_Acquisition_CSPre_Last5s.csv"))
# Test Data
# CRF_data_P100_HighvsLow_long <- read_csv(here("figures","figure_data","CRF_data_P100_HighvsLow_long.csv"))
# CRF_data_P50_HighvsLow_long <- read_csv(here("figures","figure_data","CRF_data_P50_HighvsLow_long.csv"))
# CRF_data_High_100Vs50_long <- read_csv(here("figures","figure_data","CRF_data_High_100Vs50_long.csv"))
# CRF_data_Low_100Vs50_long <- read_csv(here("figures","figure_data","CRF_data_Low_100Vs50_long.csv"))
CRF_ALL_data_long_Avg <- read_csv(here("figures","figure_data","CRF_ALL_data_long_Avg.csv"))
CRF_RepeatTest_data_long_Avg <- read_csv(here("figures","figure_data","CRF_RepeatTest_ALL_data_repeatTest_long_Avg.csv"))
# This analysis is not great - Standard ANOVA, only 4 rats did all 4 tests so this analysis kicks out too many subjects
rawdata <- CRF_RepeatTest_data_long_Avg %>%
filter(Value == "Diff",
measure == "LP",
ExcludeSubject == "Keep")
# Stage 1 Acquisition Frequency
anova <- aov_4(Freq ~ (TestCondition|subject), data = rawdata, anova_table = list(correction = "none", es = "pes"))
anova_test_Value <- apa_print(anova, mse = "FALSE",correction = "none",es = "pes")
# ## simple effects - linear trend on Day
# simple <- emmeans(anova, ~TestCondition)
# simple_Test_Value <- apa_print(contrast(simple, interaction = "pairwise", by = "Probability", adjust = "tukey"))
anova_test_Value$table
# simple_Test_Value$table
anova_test_Value$table
# This analysis is not great - Standard ANOVA, only 4 rats did all 4 tests so this analysis kicks out too many subjects
rawdata <- CRF_RepeatTest_data_long_Avg %>%
filter(Value == "Diff",
measure == "LP")
# Stage 1 Acquisition Frequency
anova <- aov_4(Freq ~ (TestCondition|subject), data = rawdata, anova_table = list(correction = "none", es = "pes"))
anova_test_Value <- apa_print(anova, mse = "FALSE",correction = "none",es = "pes")
anova_test_Value$table
view(CRF_RepeatTest_data_long_Avg)
anova <- aov_4(Freq ~ (Value*Probability|subject), data = rawdata, anova_table = list(correction = "none", es = "pes"))
# This analysis is not great - Standard ANOVA, only 4 rats did all 4 tests so this analysis kicks out too many subjects
rawdata <- CRF_RepeatTest_data_long_Avg %>%
filter(Value == "Diff",
measure == "LP") %>%
mutate(comparison = ifelse(TestCondition == "P100_HighVsLow" | TestCondition == "P100_HighVsLow" , "Values", "Probabilities"),
Constant = ifelse(TestCondition == "P100_HighVsLow" | TestCondition == "High_100Vs50" , "High", "Low"))
# Stage 1 Acquisition Frequency
anova <- aov_4(Freq ~ (comparison*Constant|subject), data = rawdata, anova_table = list(correction = "none", es = "pes"))
# This analysis is not great - Standard ANOVA, only 4 rats did all 4 tests so this analysis kicks out too many subjects
rawdata <- CRF_RepeatTest_data_long_Avg %>%
filter(Value == "Diff",
measure == "LP") %>%
mutate(comparison = ifelse(TestCondition == "P100_HighVsLow" | TestCondition == "P100_HighVsLow" , "Values", "Probabilities"),
Constant = ifelse(TestCondition == "P100_HighVsLow" | TestCondition == "High_100Vs50" , "High", "Low"))
# Stage 1 Acquisition Frequency
anova <- aov_4(Freq ~ (comparison*Constant|subject), data = rawdata, anova_table = list(correction = "none", es = "pes"))
# This analysis is not great - Standard ANOVA, only 4 rats did all 4 tests so this analysis kicks out too many subjects
rawdata <- CRF_RepeatTest_data_long_Avg %>%
filter(Value == "Diff",
measure == "LP") %>%
mutate(comparison = ifelse(TestCondition == "P100_HighVsLow" | TestCondition == "P100_HighVsLow" , "Values", "Probabilities"),
Constant = ifelse(TestCondition == "P100_HighVsLow" | TestCondition == "High_100Vs50" , "High", "Low"))
# Stage 1 Acquisition Frequency
anova <- aov_4(Freq ~ (comparison*Constant|subject), data = rawdata, anova_table = list(correction = "none", es = "pes"))
unique(CRF_RepeatTest_data_long_Avg)
unique(CRF_RepeatTest_data_long_Avg$TestCondition)
# This analysis is not great - Standard ANOVA, only 4 rats did all 4 tests so this analysis kicks out too many subjects
rawdata <- CRF_RepeatTest_data_long_Avg %>%
filter(Value == "Diff",
measure == "LP") %>%
mutate(comparison = ifelse(TestCondition == "P100_HighVsLow" | TestCondition == "P50_HighVsLow" , "Values", "Probabilities"),
Constant = ifelse(TestCondition == "P100_HighVsLow" | TestCondition == "High_100Vs50" , "High", "Low"))
# Stage 1 Acquisition Frequency
anova <- aov_4(Freq ~ (comparison*Constant|subject), data = rawdata, anova_table = list(correction = "none", es = "pes"))
anova_test_Value <- apa_print(anova, mse = "FALSE",correction = "none",es = "pes")
anova_test_Value$table
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_3_LPL_Instrumental_WithinSessionTimeBins.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_2_CRF.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_3_LPL.R', echo=TRUE)
