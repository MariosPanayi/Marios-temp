## COllapses multiple subfolders if needed
datafoldersinproject1 <- c("rawdata")
datafoldersinproject2 <-c("Marios")
## Project specific folder
projectdatafolder <- c("3_LeverPressingForLights")
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("LPL_Acquisition_RR2_Day1",
"LPL_Acquisition_RR2_Day2",
"LPL_Acquisition_RR2_Day3",
"LPL_Acquisition_RR2_Day4")
#  extract data filenames, only .txt --------------------------------------
datafilepaths <-0
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".txt")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function
coulbourn_rawdatasplit(filename,folderpath)
}
}
#  extract processed data filenames, only .csv and put them into a --------
########## Set parameters ############
## List of states
S = c("IRI" = 1,
"Flash" = 2,
"Steady" = 3,
"End" = 4)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 1
## States to bin and which not to bin
nobin = c( S["End"])
bin = c( S["Flash"], S["Steady"])
## Identify state that trials start in, Here These are states that occur after a 'successful' operant response
trialstartstate = c(S["IRI"])
## Time bin pre and post target states of interest, in seconds
prebintime <- 5
postbintime <- 5
########## Run Analysis ############
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Instrumental_PrePosttimebin(filename,folderpath,S,timebase, timebinwidth, nobin, bin, trialstartstate, prebintime, postbintime)
}
}
# Combine all data --------------------------------------------------------
#create list of all filenames
filestojoin <- "0"
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i],"Processed_TimeBin",  sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv", full.names = TRUE)
filestojoin <- c(filestojoin, datafilepaths)
# for (j in c(1:length(datafilepaths))) {
#
#   # For each processed .csv file, load the data and then join it together
#   filename <- datafilepaths[j]
#   ## Load and analyse
}
#delete initialising variable
filestojoin <- filestojoin[-1]
## Load each table of data and join into a single
for (i in c(1:length(filestojoin))){
if (i == 1){
rawdata <- read_csv(filestojoin[i])
} else {
tempdata <- read_csv(filestojoin[i])
rawdata <- full_join(rawdata,tempdata)
}
}
# Recode COunterbalancing information -----------------------------------
## Solution: create a counterbalancing data frame and then left_join() with the rawdata to match all relevant rows on Subject[Make sure subject is labelled the same in both tables]
subject <- c("17____",
"18____",
"19____",
"20____",
"21____",
"22____",
"42____",
"43____",
"44____",
"23____",
"24____",
"25____")
counterbalancing <- c("A",
"B",
"A",
"B",
"A",
"B",
"A",
"B",
"A",
"A",
"B",
"B")
# Create counterbalancing lookup table
lookup_counterbalancing <- data.frame(subject, counterbalancing)
# Combine with rawdata
rawdata <- left_join(rawdata, lookup_counterbalancing, by = "subject")
###
state_ID <- c("IRI",
"Flash",
"Steady",
"End",
"Pre",
"Post")
Period <- c("IRI",
"Light",
"Light",
"End",
"Pre",
"Post")
bin_state <- c(1,
2,
3,
4,
111,
222)
# Create counterbalancing lookup table
lookup_stateIDs <- data.frame(bin_state, Period, state_ID)
# COmbine with rawdata
rawdata <- left_join(rawdata, lookup_stateIDs, by =c("bin_state"))
###
state_ID <- c("Flash",
"Steady",
"Flash",
"Steady")
CS_name <- c("Left",
"Right",
"Right",
"Left")
counterbalancing<- c("A",
"A",
"B",
"B")
# Create counterbalancing lookup table
lookup_CSname <- data.frame(counterbalancing, state_ID, CS_name)
# Combine with rawdata
rawdata <- left_join(rawdata, lookup_CSname, by = c("counterbalancing","state_ID"))
# Not the most satisfying solution, but will have to do since other methods don't appear to be working very well
rawdata <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name[Period == "Light"])[1]) %>%
ungroup()
# Calculate Session/Day number --------------------------------------------
rawdata <- rawdata %>%
mutate(folder1 = folder) %>%
separate(folder1, c(NA,"Stage","Day"))
rawdata <- rawdata %>%
mutate(folder1 = folder) %>%
separate(folder1, c(NA,"Stage","Schedule","Day"))
savefolderpath <- here("rawdata","Marios","3_LeverPressingForLights","CombinedData")
savefilename <- "LPL_ProcessedData_pertrial_1sbins.csv"
dir.create(savefolderpath)
write_csv(rawdata,here(savefolderpath,savefilename))
filename <- "LPLAcquisitionRR2Day1B_Rat43.csv"
filepath <-here("rawdata", "Marios", "3_LeverPressingForLights", "LPL_Acquisition_RR2_Day1", filename)
## List of states
S = c("IRI" = 1,
"Flash" = 2,
"Steady" = 3,
"End" = 4)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 1
## States to bin and which not to bin
nobin = c( S["End"])
bin = c( S["Flash"], S["Steady"])
## Identify state that trials start in, Here These are states that occur after a 'successful' operant response
trialstartstate = c(S["IRI"])
## Time bin pre and post target states of interest, in seconds
prebintime <- 5
postbintime <- 5
## Read in data
rawdata <- read_csv(filepath)
# coulbourn_processdata_Instrumental_PrePosttimebin <- function(filename,folderpath,S,timebase, timebinwidth, nobin, bin, trialstartstate, prebintime, postbintime) {
#
filepath <- here(folderpath, filename)
rawdata <- rawdata %>%
mutate(Time = Time*timebase/1000)
### Identify the start time of each trial, and the final end state (indicated by -1 in Coulbourn)
trialTimes <- c(which(rawdata$`Transition State` == trialstartstate), which(rawdata$`Transition State` == -1))
which(rawdata$`Transition State` == -1)
rawdata$Time[which(rawdata$`Transition State` == -1)]
## state that should be considered the end of the session. For the absolute end of recording specify the number -1 [the state_ID of the finished state in Coulbourn]
sessionendstate <- S["End"]
rawdata$Time[which(rawdata$`Transition State` == sessionendstate)]
# Calculate TIme Bins across session --------------------------------------------------------
sessionlegnth <-  rawdata$Time[which(rawdata$`Transition State` == sessionendstate)]
sessionlegnth
# Calculate TIme Bins across session --------------------------------------------------------
sessionlength <-  rawdata$Time[which(rawdata$`Transition State` == sessionendstate)]
# Timebins
totalbins <- sessionlength/timebinwidth
totalbins
# Timebins
totalbins <- sessionlength/timebinwidth
totalbins
filename <- "LPLAcquisitionRR2Day1B_Rat43.csv"
filepath <-here("rawdata", "Marios", "3_LeverPressingForLights", "LPL_Acquisition_RR2_Day1", filename)
## List of states
S = c("IRI" = 1,
"Flash" = 2,
"Steady" = 3,
"End" = 4)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 60
## States to count the occurence of
bin = c(S["Flash"], S["Steady"])
## state that should be considered the end of the session. For the absolute end of recording specify the number -1 [the state_ID of the finished state in Coulbourn]
sessionendstate <- S["End"]
## Read in data
rawdata <- read_csv(filepath)
## Key to convert actions
# Change time units to seconds --------------------------------------------
rawdata <- rawdata %>%
mutate(Time = Time*timebase/1000)
# Calculate TIme Bins across session --------------------------------------------------------
sessionlength <-  rawdata$Time[which(rawdata$`Transition State` == sessionendstate)]
# Timebins
totalbins <- sessionlength/timebinwidth
timebins <- c(1:totalbins)
totalbins
timebins
timebin_start <- c(0:sessionlength, 5)
timebin_start
timebin_start <- c(0:sessionlength, timebinwidth)
timebin_start
timebinwidth
sessionlength
timebin_start <- c(0:sessionlength, timebinwidth)
timebin_start
timebin_start <- c(0:sessionlength, by= timebinwidth)
timebin_start
timebin_start <- seq(from = 0, to = sessionlength, by= timebinwidth)
timebin_start
timebin_start <- seq(from = 0, to = sessionlength-1, by= timebinwidth)
timebin_start
timebin_end <- seq(from = timebinwidth, to = sessionlength, by= timebinwidth)
4 <- seq(from = timebinwidth, to = sessionlength, by= timebinwidth)
timebin_end <- seq(from = timebinwidth, to = sessionlength, by= timebinwidth)
source('~/.active-rstudio-document', echo=TRUE)
timebin_end <- seq(from = timebinwidth, to = sessionlength, by= timebinwidth)
timebin_end
timebins
coulbourn_actionbin <- function(A_on, A_off, rawdata, bin_start, bin_end, bin_time, timebase, timebinwidth){
#### Check data for errors###
## Is data set empty? If so, just return 0s in databins
if (length(A_on) > 0) {
# First action initiated before recording started
# Set an action initiation at time = 0. This will artificially inflate the number of actions, but start of session is not interesting
if (A_on[1] > A_off[1]) {
A_on <- c(0, A_on)
}
# If last value of action_start is greater than the last value of action ending, then recording stopped while action still in process
# Set an action ending at the final session end time
if (tail(A_on,1) > tail(A_off,1)) {
A_off <- c(A_off, tail(rawdata$Time,1))
}
# Check for any actions that don't have an exit recorded. Assumption = action ended faster than time resolution of the system
# Check for any actions that don't have a start. Assumption = action started after last action ended, but within time resolution of the system
# First check if there is exactly 1 action, if so, this code will break, so skip
if (length(A_on) == 1) {print("only one action performed")} else {
for (i in c(1:(length(A_on)-1))) {
if (A_on[i+1] < A_off[i]) {
A_off <- c(A_off[c(1:(i-1))], (A_on[i+1] + timebase/1000) , A_off[c(i:length(A_off))])
print("Check timestamps: actions happened without an end signal")
}
}
for (i in c(1:(length(A_off)-1))) {
if (A_off[i+1] < A_on[i]) {
A_on <- c(A_on[c(1:(i-1))], (A_off[i+1] + timebase/1000) , A_on[c(i:length(A_on))])
print("Check timestamps: actions ended without a corresponding enrty signal")
}
}
}
#### Calculate frequency and duration of actions ####
# Initialise variable
bin_A_freq <- replicate(length(bin_time), 0)
bin_A_dur <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A_freq[i] = sum(A_on >= bin_time[i] & A_on < (bin_time[i] + timebinwidth))
bin_start <- bin_time[i]
bin_end <- bin_time[i] + timebinwidth
for (j in c(1:length(A_on))){
# action starts before timebin and ends within timebin
if ( A_on[j] < bin_start & A_off[j] >= bin_start & A_off[j] < bin_end) {
bin_A_dur[i] <- bin_A_dur[i] + (A_off[j] - bin_start)
# action after timebin starts and before timebin ends
} else if ( A_on[j] >= bin_start & A_off[j] < bin_end ) {
bin_A_dur[i] <- bin_A_dur[i] + (A_off[j] - A_on[j])
# action starts within the timebin , and ends after timebin
} else if ( A_on[j] >= bin_start & A_on[j] < bin_end & A_off[j] >= bin_end ) {
bin_A_dur[i] <- bin_A_dur[i] + bin_end - A_on[j]
# action before bin starts and continues until after bin
} else if ( A_on[j] <= bin_start & A_off[j] > bin_end ) {
bin_A_dur[i] <- bin_A_dur[i] + timebinwidth
} else {bin_A_dur[i] <- bin_A_dur[i]}
}
}
bin_A_data <- cbind(bin_A_freq,bin_A_dur)
return(bin_A_data)
} else {
bin_A_freq <- replicate(length(bin_time), 0)
bin_A_dur <- replicate(length(bin_time), 0)
bin_A_data <- cbind(bin_A_freq,bin_A_dur)
return(bin_A_data)
}
# End of function
}
A1_on <- rawdata$Time[rawdata$A1_On == 1]
A1_off <- rawdata$Time[rawdata$A1_Off == 1]
A1_on <- rawdata$Time[rawdata$A1_On == 1]
A1_off <- rawdata$Time[rawdata$A1_Off == 1]
# A1_bin <- coulbourn_actionbin(A1_on, A1_off)
A1_bin <- coulbourn_actionbin(A1_on, A1_off, rawdata, timebin_start, timebin_end, timebin_start, timebase, timebinwidth)
A1_bin
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_2_ConditionedReinforcement.R', echo=TRUE)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/Plot_2_CRF.R', echo=TRUE)
data_PerSession_CSPre %>%
filter(Period == "CS") %>%
select(-MagDuration, -Period) %>%
pivot_wider(names_from = subject, values_from = MagEntries) %>%
kable()
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "CSPre",
subject == "38____") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-1,6.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
# scale_linetype_manual(name = "", values = linetypes)  +
# scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
# scale_shape_manual(name = "", values = pointshapes) +
# scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "CSPre",
subject != "38____") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-1,6.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
# scale_linetype_manual(name = "", values = linetypes)  +
# scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
# scale_shape_manual(name = "", values = pointshapes) +
# scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur
# #Inspect individual animals
#
# data_PerSession_CSPre %>%
#   filter(Period == "CS") %>%
#   select(-MagEntries, -Period) %>%
#   pivot_wider(names_from = subject, values_from = MagDuration) %>%
#   kable()
#
data_PerSession_CSPre %>%
filter(Period == "CS") %>%
select(-MagDuration, -Period) %>%
pivot_wider(names_from = subject, values_from = MagEntries) %>%
kable()
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "CS",
subject != "38____") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-1,6.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
# scale_linetype_manual(name = "", values = linetypes)  +
# scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
# scale_shape_manual(name = "", values = pointshapes) +
# scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "CS") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-1,6.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
# scale_linetype_manual(name = "", values = linetypes)  +
# scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
# scale_shape_manual(name = "", values = pointshapes) +
# scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "Pre") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-1,6.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
# scale_linetype_manual(name = "", values = linetypes)  +
# scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
# scale_shape_manual(name = "", values = pointshapes) +
# scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagDur <- data_PerSession_CSPre %>%
filter(Period == "CSPre") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagDuration, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Durations 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-1,6.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
# scale_linetype_manual(name = "", values = linetypes)  +
# scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
# scale_shape_manual(name = "", values = pointshapes) +
# scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagDur
Acqsuisition_Stage1_MagFreq <- data_PerSession_CSPre %>%
filter(Period == "CSPre") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagEntries, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Entry 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-1,6.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
# scale_linetype_manual(name = "", values = linetypes)  +
# scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
# scale_shape_manual(name = "", values = pointshapes) +
# scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagFreq
Acqsuisition_Stage1_MagFreq <- data_PerSession_CSPre %>%
filter(Period == "CSPre") %>%
ggplot(mapping = aes(x = as.factor(Day), y = MagEntries, group = CS_name, colour = CS_name, fill = CS_name, shape = CS_name,linetype = CS_name)) +
stat_summary_bin(fun.data = "mean_se", geom = "line", size = .5) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.0, size = .3, linetype = 1, show.legend = FALSE) +
stat_summary_bin(fun.data = "mean_se", geom = "point", size = 2) +
# Make Pretty
scale_y_continuous( expand = expansion(mult = c(0, 0)), breaks=seq(-100,100,1)) +
ggtitle("Acquisition") + xlab("Day") + ylab("Magazine Entry 10s (CS-Pre)") +
theme_cowplot(11) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size=10)) +
coord_cartesian(ylim = c(-1,6.0001)) +
theme(axis.title.x=element_text(face = "bold")) +
# scale_linetype_manual(name = "", values = linetypes)  +
# scale_colour_manual(name = "", values = linecolours, aesthetics = c("colour")) +
# scale_shape_manual(name = "", values = pointshapes) +
# scale_fill_manual(name = "", values = fillcolours) +
theme(legend.key.width=unit(1,"line"))
Acqsuisition_Stage1_MagFreq
