"Post")
bin_state <- c(2,
3,
4,
5,
6,
7,
8,
9)
lookup_stateIDs <- data.frame(bin_state, Period, state_ID)
rawdata <- left_join(rawdata, lookup_stateIDs, by =c("bin_state"))
CS_name <- c("A++--",
"B+-",
"C++",
"D+",
"A++--",
"B+-",
"C++",
"D+",
"A++--",
"B+-",
"C++",
"D+",
"A++--",
"B+-",
"C++",
"D+")
state_ID <- c("Click",
"Noise",
"Tone",
"Siren",
"Click",
"Noise",
"Tone",
"Siren",
"Click",
"Noise",
"Tone",
"Siren",
"Click",
"Noise",
"Tone",
"Siren")
counterbalancing<- c("A",
"A",
"A",
"A",
"B",
"B",
"B",
"B",
"C",
"C",
"C",
"C",
"D",
"D",
"D",
"D")
lookup_CSname <- data.frame(counterbalancing, state_ID, CS_name)
rawdata <- left_join(rawdata, lookup_CSname, by = c("counterbalancing","state_ID"))
View(rawdata)
rawdata$CS_name[rawdata$savename == "CRFAcquisitionADay1_Rat13.csv"]]
rawdata$CS_name[rawdata$savename == "CRFAcquisitionADay1_Rat13.csv"]
unique(rawdata$CS_name[rawdata$savename == "CRFAcquisitionADay1_Rat13.csv"])
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
replace_na(CS_name, unique(CS_name))
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
replace_na(CS_name, unique(subject))
mutate(meow = replace_na(CS_name, unique(subject))
jfdsjkfd
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(meow = replace_na(CS_name, unique(subject)))
View(a)
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, unique(CS_name)))
unique(rawdata$CS_name)
unique(rawdata$CS_name)[1]
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, na.omit(unique(CS_name))))
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, unique(na.omit(CS_name))))
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, unique(na.omit(CS_name))))
?match
unique(rawdata$CS_name)
match(unique(rawdata$CS_name), "A++--")
valid_csnames <- c("A++--", "C++", "D+", "B+-")
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, match(unique(CS_name)), valid_csnames)))
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, CS_name[match(unique(CS_name), valid_csnames)]))
CS_name[match(unique(CS_name), valid_csnames)]
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, CS_name[match(unique(CS_name), valid_csnames)]))
View(rawdata)
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CUE_name = replace_na(CS_name, CS_name[match(unique(CS_name), valid_csnames)]))
unique(CS_name)[2]
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, unique(CS_name)[2]))
View(a)
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, unique(CS_name)[2]))
is.na("1")
mutate(CS_name = replace_na(CS_name, unique(!is.na(CS_name)))
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, unique(!is.na(CS_name))))
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, unique(!is.na(CS_name))))
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, unique(drop_na(CS_name))))
drop_na(CS_name)
unique(CS_name)
unique(a$CS_name)
is.na(unique(a$CS_name) )
!is.na(unique(a$CS_name) )
which(!is.na(unique(a$CS_name)))
CS_name[which(!is.na(unique(CS_name)))]
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = replace_na(CS_name, CS_name[which(!is.na(unique(CS_name)))]))
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = "x")
View(a)
unique(!is.na(a$CS_name))
which(unique(!is.na(a$CS_name)))
is.na(a$CS_name)
unique(a$CS_name)
which(unique(rawdata$CS_name))
unique(rawdata$CS_name)
is.na(unique(rawdata$CS_name))
which(is.na(unique(rawdata$CS_name)))
which(!is.na(unique(rawdata$CS_name)))
CS_name[which(!is.na(unique(CS_name)))]
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = CS_name[which(!is.na(unique(CS_name)))])
View(a)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterAnalysisScript_ConditionedReinforcement.R')
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = CS_name[which(!is.na(unique(CS_name)))])
View(a)
unique(CS_name) != NA
unique(CS_name)
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = CS_name[which(unique(CS_name) == NA)])
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = CS_name[which(unique(CS_name) = NA)])
unique(CS_name) = NA
unique(CS_name) = "NA"
unique(CS_name) == "NA"
which(unique(CS_name) != "NA")
CS_name[which(unique(CS_name) != "NA")])
CS_name[which(unique(CS_name) != "NA")]
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = CS_name[which(unique(CS_name) != "NA")])
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = CS_name[unique(CS_name)[2]])
rawdata <- left_join(rawdata, lookup_CSname, by = c("counterbalancing","state_ID"))
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterAnalysisScript_ConditionedReinforcement.R')
View(rawdata)
View(a)
a <- rawdata %>%
group_by(savename, subject, session, bin_trial) %>%
mutate(CS_name = CS_name[unique(CS_name)[1]])
View(a)
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = CS_name[unique(CS_name)[1]])
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = CS_name[unique(CS_name)[2]])
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = CS_name[unique(CS_name)[1]])
View(a)
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = CS_name[11])
unique(CS_name)[1]
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name)[1])
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name)[2])
validCSnames <- c("A++--",
"B+-",
"C++",
"D+")
match(rawdata$CS_name, validCSnames)
which(match(rawdata$CS_name, validCSnames))
is.na(match(rawdata$CS_name, validCSnames))
which(is.na(match(rawdata$CS_name, validCSnames)))
str_detect(validCSnames, rawdata$CS_name)
which(str_detect(validCSnames, rawdata$CS_name))
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = CS_name[which(str_detect(validCSnames, CS_name))])
a <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = CS_name[which(str_detect(validCSnames, unique(CS_name)))])
CS_name[which(str_detect(validCSnames, unique(CS_name)))]
# Not the most satisfying solution, but will have to do since other mehtods don't appear to be working very well
rawdata <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name)[2])
View(rawdata)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterAnalysisScript_ConditionedReinforcement.R')
View(rawdata)
View(rawdata)
# Not the most satisfying solution, but will have to do since other mehtods don't appear to be working very well
rawdata <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name)[2]) %>%
ungroup()
#
# rawdata <- rawdata %>%
#   mutate(Day = str_split(folder))
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterAnalysisScript_ConditionedReinforcement.R')
View(rawdata)
rawdata <- rawdata %>%
mutate(Day = str_split(folder))
str_split(rawdata$folder)
str_split(rawdata$folder, "_")
rawdata <- rawdata %>%
mutate(Day = str_split(folder, "_"))
rawdata <- rawdata %>%
mutate(Day = str_split(folder, "_")[2])
rawdata <- rawdata %>%
separate(folder, "Day")
View(rawdata)
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterAnalysisScript_ConditionedReinforcement.R')
View(a)
a <- rawdata %>%
separate(folder, c("Experiment","Day"))
a <- rawdata %>%
separate(folder, c("Acq","Day"))
a <- rawdata %>%
separate(folder, c("Acq","Meow"))
rawdata <- rawdata %>%
mutate(folder1 = folder) %>%
separate(folder1, c("Stage","Day"))
folderpath
here()
savefolderpath <- here("rawdata","Marios","2_ConditionedReinforcement","CombinedData")
savefilename <- "CRF_ProcessedData_pertrial_1sbins.csv"
write_csv(rawdata,here(savefolderpath,savefilename))
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterAnalysisScript_ConditionedReinforcement.R')
savefolderpath <- here("rawdata","Marios","2_ConditionedReinforcement","CombinedData")
savefilename <- "CRF_ProcessedData_pertrial_1sbins.csv"
write_csv(rawdata,here(savefolderpath,savefilename))
rawdata <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name[Period == "CS"])[1]) %>%
ungroup()
# Not the most satisfying solution, but will have to do since other methods don't appear to be working very well
rawdata <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name[Period == "CS"])) %>%
ungroup()
# Not the most satisfying solution, but will have to do since other methods don't appear to be working very well
rawdata <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name[Period == "CS"])[1]) %>%
ungroup()
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
# Package for relative file paths
library(here)
# Load Analysis Functions
source(here("scripts", "CoulbournAnalysisFunctions.R"))
# Identify files to analyze
# Can't use here() function effectively here, so have to create relative file paths
## COllapses multiple subfolders if needed
datafoldersinproject1 <- c("rawdata")
datafoldersinproject2 <-c("Marios")
## Project specific folder
projectdatafolder <- c("1_SpecificCI")
## Final level of folders contianing the relevant .txt Coulbourn files
listofdatafolders <- c("Acquisition_Stage1_Day1",
"Acquisition_Stage1_Day2")
#  extract data filenames, only .txt --------------------------------------
datafilepaths <-0
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".txt")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function
coulbourn_rawdatasplit(filename,folderpath)
}
}
#  extract processed data filenames, only .csv and put them into a --------
########## Set parameters ############
## List of states
S = c("ITI" = 1,
"PreCS" = 2,
"Click" = 6,
"Noise" = 7,
"Tone" = 8,
"Siren" = 9,
"Pel_Banana" = 10,
"Pel_Chocolate" = 11,
"End" = 14)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 1
## States to bin and which not to bin
nobin = c(S["ITI"], S["End"])
bin = c(S["PreCS"], S["Click"], S["Noise"], S["Tone"], S["Siren"], S["Pel_Banana"], S["Pel_Chocolate"])
## Identify state that trials start in, usually the ITI ;)
trialstartstate = S["ITI"]
########## Run Analysis ############
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i], sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv")
for (j in c(1:length(datafilepaths))) {
# For each raw.txt file split up the data into indivudal subjects .csv files for subsequent analysis
folderpath <- here(datafoldersinproject1, datafoldersinproject2,projectdatafolder,listofdatafolders[i])
filename <- datafilepaths[j]
## Run Function - N.B. Warnings will appear to tell you that the new directory for data storage already exists. Safe to ignore.
coulbourn_processdata_Pavlovian_timebin(filename,folderpath,S,timebase, timebinwidth, nobin, bin, trialstartstate)
}
}
# Combine all data --------------------------------------------------------
#create list of all filenames
filestojoin <- "0"
for (i in c(1:length(listofdatafolders))){
lookup <- paste(datafoldersinproject1, datafoldersinproject2, projectdatafolder, listofdatafolders[i],"Processed_TimeBin",  sep = "/")
datafilepaths <- list.files(path = lookup, pattern = ".csv", full.names = TRUE)
filestojoin <- c(filestojoin, datafilepaths)
# for (j in c(1:length(datafilepaths))) {
#
#   # For each processed .csv file, load the data and then join it together
#   filename <- datafilepaths[j]
#   ## Load and analyse
}
#delete initialising variable
filestojoin <- filestojoin[-1]
## Load each table of data and join into a single
for (i in c(1:length(filestojoin))){
if (i == 1){
rawdata <- read_csv(filestojoin[i])
} else {
tempdata <- read_csv(filestojoin[i])
rawdata <- full_join(rawdata,tempdata)
}
}
# Recode COunterbalancing information -----------------------------------
## Solution: create a counterbalancing data frame and then left_join() with the rawdata to match all relevant rows on Subject[Make sure subject is labelled the same in both tables]
subject <- c("1_____",
"2_____",
"3_____",
"4_____",
"5_____",
"6_____",
"26____",
"27____",
"28____",
"29____",
"30____",
"31____",
"7_____",
"8_____",
"32____",
"33____")
counterbalancing <- c("A",
"B",
"C",
"D",
"A",
"B",
"A",
"B",
"C",
"D",
"A",
"B",
"C",
"D",
"C",
"D")
# Create counterbalancing lookup table
lookup_counterbalancing <- data.frame(subject, counterbalancing)
# Combine with rawdata
rawdata <- left_join(rawdata, lookup_counterbalancing, by = "subject")
###
state_ID <- c("PreCS",
"Click",
"Noise",
"Tone",
"Siren",
"Pel_Banana",
"Pel_Chocolate")
Period <- c("Pre",
"CS",
"CS",
"CS",
"CS",
"Post",
"Post")
bin_state <- c(2,
6,
7,
8,
9,
10,
11)
# Create counterbalancing lookup table
lookup_stateIDs <- data.frame(bin_state, Period, state_ID)
# COmbine with rawdata
rawdata <- left_join(rawdata, lookup_stateIDs, by =c("bin_state"))
###
CS_name <- c("A_O1",
"B_O2",
"C_O1",
"D_O2",
"A_O1",
"B_O2",
"C_O1",
"D_O2",
"A_O1",
"B_O2",
"C_O1",
"D_O2",
"A_O1",
"B_O2",
"C_O1",
"D_O2")
state_ID <- c("Click",
"Noise",
"Tone",
"Siren",
"Click",
"Noise",
"Tone",
"Siren",
"Click",
"Noise",
"Tone",
"Siren",
"Click",
"Noise",
"Tone",
"Siren")
counterbalancing<- c("A",
"A",
"A",
"A",
"B",
"B",
"B",
"B",
"C",
"C",
"C",
"C",
"D",
"D",
"D",
"D")
# Create counterbalancing lookup table
lookup_CSname <- data.frame(counterbalancing, state_ID, CS_name)
# Combine with rawdata
rawdata <- left_join(rawdata, lookup_CSname, by = c("counterbalancing","state_ID"))
# Not the most satisfying solution, but will have to do since other methods don't appear to be working very well
rawdata <- rawdata %>%
group_by(subject, session, bin_trial) %>%
mutate(CS_name = unique(CS_name[Period == "CS"])[1]) %>%
ungroup()
# Calculate Session/Day number --------------------------------------------
rawdata <- rawdata %>%
mutate(folder1 = folder) %>%
separate(folder1, c("Stage","Day"))
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_2_ConditionedReinforcement.R')
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_1_SpecificCI.R')
savefolderpath <- here("rawdata","Marios","1_SpecificCI","CombinedData")
savefilename <- "CRF_ProcessedData_pertrial_1sbins.csv"
dir.create(savefolderpath)
write_csv(rawdata,here(savefolderpath,savefilename))
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_2_ConditionedReinforcement.R')
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_1_SpecificCI.R')
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/MasterProcessingScript_2_ConditionedReinforcement.R')
