for (i in c(1:totalTrials)) {
trialIdx = c(trialTimes[i]:(trialTimes[i+1]-1))
## Find row values for the tranisition state entries that are in the "bin" list
statechange_start = which(!is.na(match(rawdata$`Transition State`, bin)))
statechange_idx = which(rawdata$`Transition State` !=0)
statechange_ID = rawdata$`Transition State`[statechange_idx]
statechange_trialNUm = rawdata$trialNum[statechange_idx]
# data.frame(statechange_idx,statechange_ID,statechange_trialNUm)
}
rawdata$Time[which(rawdata[,14] == 1)]
statechange_start
statechange_idx
statechange_ID
statechange_Time = rawdata$Time[statechange_idx]
statechange_Time
3750*20
75000/1000
statechange_Time[2:end]
statechange_Time[2:3]
statechange_Time[2:]
statechange_Time[2:length(statechange_Time)]
statechange_start = which(!is.na(match(rawdata$`Transition State`, bin)))
statechange_start
statechange_idx
trialIdx
statechange_start
statechange_Time
statechange_idx
statechange_ID
binstates_idx =  which(!is.na(match(statechange_ID, bin)))
binstates_idx
statechange_Time = rawdata$Time[statechange_idx]
statechange_Time
binstart_Time = statechange_Time[binstates_idx]
binstart_Time
binend_Time = statechange_Time[binstates_idx+1]
binend_Time
binstart_Time-binend_Time
500*20/1000
binwidth = binend_Time - binstart_Time
binwidth
# Load Individual File ----------------------------------------------------
## Set file path
filename <- "CRFMagTrainSess1_Rat10_Run1.csv"
folderpath <- here("rawdata", "Marios",'ConditionedReinforcement')
filepath <- here(folderpath, filename)
## Read in data
rawdata <- read_csv(filepath)
# Set parameters ----------------------------------------------------------
## List of states
S = c("ITI" = 1,
"Pre" = 2,
"Pel" = 3)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 1
## States not to bin
nobin = S["ITI"]
bin = c(S["Pre"], S["Pel"])
# Change time units to seconds --------------------------------------------
rawdata <- rawdata %>%
mutate(Time = Time*timebase/1000)
# Calculate Trials --------------------------------------------------------
## Identify state that trials start in, usually the ITI ;)
trialstartstate = S["ITI"]
## Add a column to the data set indicating trial number
### Identify the start time of each trial, and the final end state (indicated by -1 in Coulbourn)
trialTimes <- c(which(rawdata$`Transition State` == trialstartstate), which(rawdata$`Transition State` == -1))
totalTrials <- length(trialTimes) - 1
## Initialise trialnum variable with 0s for every row
trialNum <- replicate(nrow(rawdata),0)
for (i in c(1:totalTrials)) {
trialIdx = c(trialTimes[i]:(trialTimes[i+1]-1))
trialNum[trialIdx] = i
}
## append trial counter to dataframe
rawdata <- cbind(rawdata,trialNum)
# Create time-binned data - Frequency --------------------------------------
## Set up new dataframe
## get all times of interest to bin
##
## State change info
statechange_idx = which(rawdata$`Transition State` !=0)
statechange_ID = rawdata$`Transition State`[statechange_idx]
statechange_Time = rawdata$Time[statechange_idx]
## Target bin state info
binstates_idx =  which(!is.na(match(statechange_ID, bin)))
binstart_Time = statechange_Time[binstates_idx]
binend_Time = statechange_Time[binstates_idx+1]
binwidth = binend_Time - binstart_Time
binwidth
## State change info
statechange_idx = which(rawdata$`Transition State` !=0)
statechange_ID = rawdata$`Transition State`[statechange_idx]
statechange_Time = rawdata$Time[statechange_idx]
statechange_Time = rawdata$trialNum[statechange_idx]
## Target bin state info
binstates_idx =  which(!is.na(match(statechange_ID, bin)))
binstart_Time = statechange_Time[binstates_idx]
binend_Time = statechange_Time[binstates_idx+1]
binwidth = binend_Time - binstart_Time
binTrialNum = statechange_Time[binstates_idx]
binTrialNum
# Title: CoulbournDataANalysis_Frequency_PerTrial_1sBins
## Author: Marios Panayi
## Date: 16-DEC-2020
## Purpose: Analyze Extracted [i.e. individual] data from Coulbourn boxes
## Notes: Data from NIDA Pilots
# Load Packagaes ----------------------------------------------------------
## Packages for data organisation and plotting
library(tidyverse)
library(knitr)
# Package for relative file paths
library(here)
# library(ggpubr)
library(cowplot)
library(ggsignif)
library(patchwork)
library(RColorBrewer)
## Packages for Data analysis
library(afex)
afex_options(emmeans_model = "multivariate")# use multivariate model for all follow-up tests.
library(emmeans)
# install.packages("devtools")
# devtools::install_github("crsh/papaja")
# library(papaja)
# library(knitr)
# remotes::install_github("noamross/redoc")
# library(redoc)
# Load Individual File ----------------------------------------------------
## Set file path
filename <- "CRFMagTrainSess1_Rat10_Run1.csv"
folderpath <- here("rawdata", "Marios",'ConditionedReinforcement')
filepath <- here(folderpath, filename)
## Read in data
rawdata <- read_csv(filepath)
# Set parameters ----------------------------------------------------------
## List of states
S = c("ITI" = 1,
"Pre" = 2,
"Pel" = 3)
## Time base the linc was set to, in ms
timebase = 20
## Time bins to analyze each state in, in s
timebinwidth = 1
## States not to bin
nobin = S["ITI"]
bin = c(S["Pre"], S["Pel"])
# Change time units to seconds --------------------------------------------
rawdata <- rawdata %>%
mutate(Time = Time*timebase/1000)
# Calculate Trials --------------------------------------------------------
## Identify state that trials start in, usually the ITI ;)
trialstartstate = S["ITI"]
## Add a column to the data set indicating trial number
### Identify the start time of each trial, and the final end state (indicated by -1 in Coulbourn)
trialTimes <- c(which(rawdata$`Transition State` == trialstartstate), which(rawdata$`Transition State` == -1))
totalTrials <- length(trialTimes) - 1
## Initialise trialnum variable with 0s for every row
trialNum <- replicate(nrow(rawdata),0)
for (i in c(1:totalTrials)) {
trialIdx = c(trialTimes[i]:(trialTimes[i+1]-1))
trialNum[trialIdx] = i
}
## append trial counter to dataframe
rawdata <- cbind(rawdata,trialNum)
# Create time-binned data - Frequency --------------------------------------
## Set up new dataframe
## get all times of interest to bin
##
## State change info
statechange_idx = which(rawdata$`Transition State` !=0)
statechange_ID = rawdata$`Transition State`[statechange_idx]
statechange_Time = rawdata$Time[statechange_idx]
statechange_Time = rawdata$trialNum[statechange_idx]
## Target bin state info
binstates_idx =  which(!is.na(match(statechange_ID, bin)))
binstart_Time = statechange_Time[binstates_idx]
binend_Time = statechange_Time[binstates_idx+1]
binwidth = binend_Time - binstart_Time
binTrialNum = statechange_Time[binstates_idx]
#
# statechange_start = which(!is.na(match(rawdata$`Transition State`, bin)))
#
# statechange_idx = which(rawdata$`Transition State` !=0)
# for (i in c(1:length(statechange_idx))) {
#
#   if
#
#
# }
#
# rawdata$Time[which(rawdata[,14] == 1)]
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/CoulbournDataExtraction.R')
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/CoulbournDataANalysis_Frequency_PerTrial_1sBins.R')
key_actions["LLR_On"]
key_actions <- c("A1_On" = "LLR_On",
"A2_On" = "RLR_On",
"A3_On" = "Mag_On",
"A4_On" = "A4_On",
"A1_Off" = "LLR_Off",
"A2_Off" = "RLR_Off",
"A3_Off" = "Mag_Off",
"A4_Off" = "A4_Off")
key_actions["LLR_On"]
key_actions["A1_On"]
key_actions <- c("LLR_On" = "A1_On",
"RLR_On" = "A2_On",
"Mag_On" = "A3_On",
"A4_On" = "A4_On",
"LLR_Off" = "A1_Off",
"RLR_Off" = "A2_Off",
"Mag_Off" = "A3_Off",
"A4_Off" = "A4_Off")
key_actions["LLR_On"]
RawDAta$key_actions["LLR_On"]
RawDAta$paste(key_actions["LLR_On"])
rawdata$key_actions["LLR_On"]
rawdata$paste(key_actions["LLR_On"])
b = 2
rawdata%b
rawdata$b
b
rawdata$[b]
rawdata$paste(b)
b
c(b,b)
b <- c(b,b)
b
b <- c(b,b)
b
?replicate
i = 1
binstates_idx[i]
binstates_idx[3]
binstart_Time[i]
i = 3
binstates_idx
binstart_Time[i]
i
binstart_Time
binstart_Time
binend_Time
binstart_Time = statechange_Time[statechange_idx[binstates_idx]]
binstart_Time
statechange_idx[binstates_idx]
statechange_Time
statechange_idx
statechange_idx = which(rawdata$`Transition State` !=0)
statechange_ID = rawdata$`Transition State`[statechange_idx]
statechange_Time = rawdata$Time[statechange_idx]
statechange_Time = rawdata$trialNum[statechange_idx]
statechange_Time
statechange_idx
## State change info
statechange_idx = which(rawdata$`Transition State` !=0)
statechange_ID = rawdata$`Transition State`[statechange_idx]
statechange_Time = rawdata$Time[statechange_idx]
statechange_TrialNum = rawdata$trialNum[statechange_idx]
## Target bin state info
binstates_idx =  which(!is.na(match(statechange_ID, bin)))
binstart_Time = statechange_Time[binstates_idx]
binend_Time = statechange_Time[binstates_idx+1]
binwidth = binend_Time - binstart_Time
binTrialNum = statechange_TrialNum[binstates_idx]
statechange_Time
statechange_TrialNum
binstart_Time
binend_Time
binstate_ID = statechange_ID[binstates_idx]
binstate_ID
1:10
c(1:10,2)
c(1:2:10)
c(1:2:10:2)
seq(from = binstart_Time[i], to = binend_Time[i], by = timebinwidth)
seq(from = binstart_Time[i], to = binend_Time[i] - timebinwidth, by = timebinwidth)
for (i in  c(1:length(binstates_idx))) {
Tbin <- seq(from = binstart_Time[i], to = binend_Time[i] - timebinwidth, by = timebinwidth)
}
Tbin
rm Tbin
rm(Tbin)
for (i in  c(1:length(binstates_idx))) {
Temp <- seq(from = binstart_Time[i], to = binend_Time[i] - timebinwidth, by = timebinwidth)
Tbin <- c(Tbin, Temp)
}
Tbin <- 0
for (i in  c(1:length(binstates_idx))) {
Temp <- seq(from = binstart_Time[i], to = binend_Time[i] - timebinwidth, by = timebinwidth)
Tbin <- c(Tbin, Temp)
}
Tbin
Tbin[1] = []
Tbin <- Tbin[-1]
Tbin
seq(5,5,0)
replicate(10,5)
Temp
replicate(length(Temp),binstate_ID[i])
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/CoulbournDataANalysis_Frequency_PerTrial_1sBins.R')
bin_time
bin_state
bin_trial
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/CoulbournDataANalysis_Frequency_PerTrial_1sBins.R')
rawdata$A1_On > 1
rawdata$A1_On == 1
rawdata$A3_On == 1
rawdata$A3_On > 1
rawdata$Time[rawdata$A3_On == 1]
rawdata$Time[rawdata$A3_Off == 1]
A3_On <- rawdata$Time[rawdata$A3_On == 1]
A3_Off <- rawdata$Time[rawdata$A3_Off == 1]
A3_On[1] > A3_Off[1]
tail(A3_On)
tail(A3_On,1)
tail(A3_off,1)
tail(A3_Off,1)
A3_on <- rawdata$Time[rawdata$A3_On == 1]
A3_off <- rawdata$Time[rawdata$A3_Off == 1]
# Action initiated before recording started
# Set an action initiation at time = 0. This will artificially inflate the number of actions, but start of session is not interesting
if (A3_on[1] > A3_off[1]) {
A3_on <- c(0, A3_on)
}
tail(rawdata$Time,1)
c(1:length(A3_on)-1)
length(A3_on)
c(1:(length(A3_on)-1)))
c(1:(length(A3_on)-1))
length(A3_on)
length(A3_off)
#Check data for errors
A3_on <- rawdata$Time[rawdata$A3_On == 1]
A3_off <- rawdata$Time[rawdata$A3_Off == 1]
# Action initiated before recording started
# Set an action initiation at time = 0. This will artificially inflate the number of actions, but start of session is not interesting
if (A3_on[1] > A3_off[1]) {
A3_on <- c(0, A3_on)
}
# If last value of action start is greater than the last value of action ending, then recording stopped while action still in process
# Set an action ending at the final session end time
if (tail(A3_on,1) > tail(A3_off,1)) {
A3_off <- c(A3_off, tail(rawdata$Time,1))
}
length(A3_on)
length(A3_off)
# Initialise variable
bin_A3_freq <- replicate(length(bin_time), 0)
A3_on >= bin_time[i] && A3_on < (bin_time[i] + timebinwidth)
i
A3_on >= bin_time[i]
count(A3_on >= bin_time[i])
which(A3_on >= bin_time[i])
sum(A3_on >= bin_time[i])
sum(A3_on >= bin_time[i] && A3_on < (bin_time[i] + timebinwidth))
# Extract data
A3_on <- rawdata$Time[rawdata$A3_On == 1]
A3_off <- rawdata$Time[rawdata$A3_Off == 1]
# Initialise variable
bin_A3_freq <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A3_freq[i] = sum(A3_on >= bin_time[i] && A3_on < (bin_time[i] + timebinwidth))
}
bin_A3_freq
bin_time
bin_A3_freq[i] = sum(A3_on >= bin_time[i] )
# Initialise variable
bin_A3_freq <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A3_freq[i] = sum(A3_on >= bin_time[i] )
}
bin_A3_freq
bin_A3_freq <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A3_freq[i] = sum(A3_on >= bin_time[i] & A3_on < (bin_time[i] + timebinwidth))
}
bin_A3_freq
bin_A3_dur <- replicate(length(bin_time), 0)
?overlap
?array_intersect
# Extract data
A3_on <- rawdata$Time[rawdata$A3_On == 1]
A3_off <- rawdata$Time[rawdata$A3_Off == 1]
# Initialise variable
bin_A3_freq <- replicate(length(bin_time), 0)
bin_A3_dur <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A3_freq[i] = sum(A3_on >= bin_time[i] & A3_on < (bin_time[i] + timebinwidth))
for (j in c(1:length(A3_on)))
# action starts before timebin and ends within timebin
if ( A3_on[j] <= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - bin_time[i])
# action within timebin
} elseif ( A3_on[j] >= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - A3_on[j])
# action before bin ends and continues throughout the bin
} elseif ( A3_on[j] < (bin_time[i] + timebinwidth) & A3_off[j] >= (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + ((bin_time[i] + timebinwidth) - timebinwidth)
# action before bin starts and continues until after bin
} elseif ( A3_on[j] <= bin_time[i] & A3_off[j] > (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + timebinwidth
}
# Initialise variable
bin_A3_freq <- replicate(length(bin_time), 0)
bin_A3_dur <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A3_freq[i] = sum(A3_on >= bin_time[i] & A3_on < (bin_time[i] + timebinwidth))
for (j in c(1:length(A3_on)))
# action starts before timebin and ends within timebin
if ( A3_on[j] <= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - bin_time[i])
# action within timebin
} elseif ( A3_on[j] >= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - A3_on[j])
# action before bin ends and continues throughout the bin
} elseif ( A3_on[j] < (bin_time[i] + timebinwidth) & A3_off[j] >= (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + ((bin_time[i] + timebinwidth) - timebinwidth)
# action before bin starts and continues until after bin
} elseif ( A3_on[j] <= bin_time[i] & A3_off[j] > (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + timebinwidth
}
}
bin_A3_freq <- replicate(length(bin_time), 0)
bin_A3_dur <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A3_freq[i] = sum(A3_on >= bin_time[i] & A3_on < (bin_time[i] + timebinwidth))
for (j in c(1:length(A3_on))){
# action starts before timebin and ends within timebin
if ( A3_on[j] <= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - bin_time[i])
# action within timebin
} elseif ( A3_on[j] >= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - A3_on[j])
# action before bin ends and continues throughout the bin
} elseif ( A3_on[j] < (bin_time[i] + timebinwidth) & A3_off[j] >= (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + ((bin_time[i] + timebinwidth) - timebinwidth)
# action before bin starts and continues until after bin
} elseif ( A3_on[j] <= bin_time[i] & A3_off[j] > (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + timebinwidth
}
}
}
bin_A3_freq <- replicate(length(bin_time), 0)
bin_A3_dur <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A3_freq[i] = sum(A3_on >= bin_time[i] & A3_on < (bin_time[i] + timebinwidth))
for (j in c(1:length(A3_on))){
# action starts before timebin and ends within timebin
if ( A3_on[j] <= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - bin_time[i])
# action within timebin
} else if ( A3_on[j] >= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - A3_on[j])
# action before bin ends and continues throughout the bin
} else if ( A3_on[j] < (bin_time[i] + timebinwidth) & A3_off[j] >= (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + ((bin_time[i] + timebinwidth) - timebinwidth)
# action before bin starts and continues until after bin
} else if ( A3_on[j] <= bin_time[i] & A3_off[j] > (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + timebinwidth
}
}
}
# Initialise variable
bin_A3_freq <- replicate(length(bin_time), 0)
bin_A3_dur <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A3_freq[i] = sum(A3_on >= bin_time[i] & A3_on < (bin_time[i] + timebinwidth))
for (j in c(1:length(A3_on))){
# action starts before timebin and ends within timebin
if ( A3_on[j] <= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - bin_time[i])
# action within timebin
} else if ( A3_on[j] >= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - A3_on[j])
# action before bin ends and continues throughout the bin
} else if ( A3_on[j] < (bin_time[i] + timebinwidth) & A3_off[j] >= (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + ((bin_time[i] + timebinwidth) - timebinwidth)
# action before bin starts and continues until after bin
} else if ( A3_on[j] <= bin_time[i] & A3_off[j] > (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + timebinwidth
} else { bin_A3_dur[i] = }
}
}
bin_A3_freq <- replicate(length(bin_time), 0)
bin_A3_dur <- replicate(length(bin_time), 0)
for (i in c(1:length(bin_time))){
bin_A3_freq[i] = sum(A3_on >= bin_time[i] & A3_on < (bin_time[i] + timebinwidth))
for (j in c(1:length(A3_on))){
# action starts before timebin and ends within timebin
if ( A3_on[j] <= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - bin_time[i])
# action within timebin
} else if ( A3_on[j] >= bin_time[i] & A3_off[j] < (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + (A3_off[j] - A3_on[j])
# action before bin ends and continues throughout the bin
} else if ( A3_on[j] < (bin_time[i] + timebinwidth) & A3_off[j] >= (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + ((bin_time[i] + timebinwidth) - timebinwidth)
# action before bin starts and continues until after bin
} else if ( A3_on[j] <= bin_time[i] & A3_off[j] > (bin_time[i] + timebinwidth) ) {
bin_A3_dur[i] <- bin_A3_dur[i] + timebinwidth
} else { bin_A3_dur[i] = bin_A3_dur[i]}
}
}
A3_on[j] >= bin_time[i]
A3_on[j] >= bin_time[i]
A3_off[j] < (bin_time[i] + timebinwidth)
j
bin_A3_dur
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/CoulbournDataExtraction.R')
source('~/GitHub/Marios-temp/NIDA_Expts/Experiments/MPNIDA001_Pilots/scripts/CoulbournDataANalysis_Frequency_PerTrial_1sBins.R')
