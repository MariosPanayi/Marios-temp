# Define model - only random effect of Subject
model1_default<- glmer(cbind(Num__BothLevers, Num_NotLevers)~ RewardSize*Drug + (1+RewardSize+Drug|SubjID), data = rawdata ,family=binomial)
### This first section tests standard glmer() analysis approaches
# Define model - only random effect of Subject
model1_default<- glmer(cbind(Num__BothLevers, Num_NotLevers)~ RewardSize*Drug + (1+RewardSize+Drug||SubjID), data = rawdata ,family=binomial)
### This first section tests standard glmer() analysis approaches
# Define model - only random effect of Subject
model1_default<- glmer(cbind(Num__BothLevers, Num_NotLevers)~ RewardSize*Drug + (1|SubjID), data = rawdata ,family=binomial)
model1_contrSum <- glmer(cbind(Num__BothLevers, Num_NotLevers)~ RewardSize*Drug + (1|SubjID), data = rawdata,  contrasts = list(RewardSize = "contr.sum", RewardSize = "contr.sum") ,family=binomial)
Anova(model1_contrSum,type = 3)
library(parallel)
nc <- detectCores() # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
model1_mixed_LRT <- mixed(cbind(Num__BothLevers, Num_NotLevers)~ RewardSize*Drug + (1+RewardSize*Drug|SubjID), data = rawdata, family=binomial, method = "LRT", all_fit = TRUE, cl = cl)
model1_mixed_LRT <- mixed(cbind(Num__BothLevers, Num_NotLevers)~ RewardSize*Drug + (1+RewardSize+Drug|SubjID), data = rawdata, family=binomial, method = "LRT", all_fit = TRUE, cl = cl)
nice(model1_mixed_LRT)
model1_mixed_LRT <- mixed(cbind(Num__BothLevers, Num_NotLevers)~ RewardSize*Drug + (1+RewardSize+Drug||SubjID), data = rawdata, family=binomial, method = "LRT", all_fit = TRUE, cl = cl)
nice(model1_mixed_LRT)
colnames(rawdata)
model1_bothlevers <- mixed(Prop_BothLevers ~ RewardSize*Drug + (1+RewardSize+Drug|SubjID), data = rawdata, family=binomial, method = "LRT", weight = Num_ErrorTialsTotal, all_fit = TRUE, cl = cl)
model1_bothlevers <- mixed(Prop_BothLevers ~ RewardSize*Drug + (RewardSize+Drug|SubjID),
data = rawdata, family=binomial,
method = "LRT",
weight = Num_ErrorTialsTotal,
all_fit = TRUE,
cl = cl)
model1_bothlevers <- mixed(Prop_BothLevers ~ RewardSize*Drug + (RewardSize+Drug|SubjID),
data = rawdata, family=binomial,
method = "LRT",
weight = Num_ErrorTialsTotal)
rawdata$Num_ErrorTialsTotal
# Anlaysis approach - start with maximal random effects model and reduce until fit
rawdata <- rawdata %>%
omit.na()
# Anlaysis approach - start with maximal random effects model and reduce until fit
rawdata <- rawdata %>%
na.omit()
model1_bothlevers <- mixed(Prop_BothLevers ~ RewardSize*Drug + (RewardSize+Drug|SubjID),
data = rawdata, family=binomial,
method = "LRT",
weight = Num_ErrorTialsTotal)
rawdata
vioew(rawdata)
view(rawdata)
# Load Data ---------------------------------------------------------------
datafolder <- "rawdata"
filename <- "SKF_errordata.csv"
rawdata <- fread(here(datafolder,filename))
# Add new columns to data  ------------------------------------------------
rawdata <- rawdata %>%
mutate(Prop_NotLevers = 1- Prop_BothLevers,
Prop_NotLeversOrMag = 1- Prop_LeverOrMag,
Num_NotLevers = Num_ErrorTialsTotal - Num__BothLevers,
Num_NotLeverOrMag = Num_ErrorTialsTotal - Num_ErrorTialsLeverOrMag,
Num_Not_Mag = Num_ErrorTialsTotal - Num__Mag)
# Add congruence of lever to trial type
rawdata <- rawdata %>%
mutate(Prop_congruentlever = ifelse(RewardSize == "Small", Prop_Slever, Prop_Llever),
Prop_incongruentlever = ifelse(RewardSize == "Small", Prop_Llever, Prop_Slever),
Num_congruentlever = ifelse(RewardSize == "Small", Num__Slever, Num__Llever),
Num_incongruentlever = ifelse(RewardSize == "Small", Num__Llever, Num__Slever),
Prop_totalLever_congruentlever = Num_congruentlever/Num__BothLevers,
Prop_totalLever_incongruentlever = Num_incongruentlever/Num__BothLevers,
Prop_totalLever_Slever = Num__Slever/Num__BothLevers,
Prop_totalLever_Llever = Num__Llever/Num__BothLevers,
Prop_totalLeverMag_Mag = Num__Mag/Num_ErrorTialsLeverOrMag)
view(rawdata)
datafolder <- "rawdata"
filename <- "SKF_errordata.csv"
rawdata <- fread(here(datafolder,filename))
colnames(rawdata)
rawdata <- rawdata %>%
mutate(prop_congruentlever = ifelse(RewardSize == "Small", prop_Slever, prop_Llever),
prop_incongruentlever = ifelse(RewardSize == "Small", prop_Llever, prop_Slever),
congruentlever = ifelse(RewardSize == "Small", Slever, Llever),
incongruentlever = ifelse(RewardSize == "Small", Llever, Slever))
rawdata <- rawdata %>%
mutate(prop_congruentlever = ifelse(RewardSize == "Small", prop_Slever, prop_Llever),
prop_incongruentlever = ifelse(RewardSize == "Small", prop_Llever, prop_Slever),
congruentlever = ifelse(RewardSize == "Small", Slever, Llever),
incongruentlever = ifelse(RewardSize == "Small", Llever, Slever),
prop_totalLever_congruentlever = congruentlever/BothLevers,
prop_totalLever_incongruentlever = incongruentlever/BothLevers,
prop_totalLever_Slever = Slever/BothLevers,
prop_totalLever_Llever = Llever/BothLevers)
# Plot data
Plot_Proportion_visitBothLeversandMag <- figure_proportionerrors(rawdata, yvalue1, title1)
Plot_Proportion_visitBothLevers <- 		figure_proportionerrors(rawdata, yvalue2, title2)
Plot_Proportion_visitMag <- 				figure_proportionerrors(rawdata, yvalue3, title3)
Plot_Proportion_LargeLever_Total <- 		figure_proportionerrors(rawdata, yvalue4, title4)
Plot_Proportion_SmallLever_Total <- 		figure_proportionerrors(rawdata, yvalue5, title5)
Plot_Proportion_Congruent_Total <- 		figure_proportionerrors(rawdata, yvalue6, title6)
Plot_Proportion_InCongruent_Total <- 	figure_proportionerrors(rawdata, yvalue7, title7)
Plot_Proportion_LargeLever_Levers <- 	figure_proportionerrors(rawdata, yvalue8, title8)
Plot_Proportion_SmallLever_Levers <- 	figure_proportionerrors(rawdata, yvalue9, title9)
Plot_Proportion_Congruent_Levers <- 		figure_proportionerrors(rawdata, yvalue10, title10)
Plot_Proportion_InCongruent_Levers <- 	figure_proportionerrors(rawdata, yvalue11, title11)
# Plot data
Plot_Proportion_visitBothLevers <- 		figure_proportionerrors(rawdata, yvalue2, title2)
Plot_Proportion_visitMag <- 				figure_proportionerrors(rawdata, yvalue3, title3)
Plot_Proportion_LargeLever_Total <- 		figure_proportionerrors(rawdata, yvalue4, title4)
Plot_Proportion_SmallLever_Total <- 		figure_proportionerrors(rawdata, yvalue5, title5)
Plot_Proportion_Congruent_Total <- 		figure_proportionerrors(rawdata, yvalue6, title6)
Plot_Proportion_InCongruent_Total <- 	figure_proportionerrors(rawdata, yvalue7, title7)
Plot_Proportion_LargeLever_Levers <- 	figure_proportionerrors(rawdata, yvalue8, title8)
Plot_Proportion_SmallLever_Levers <- 	figure_proportionerrors(rawdata, yvalue9, title9)
Plot_Proportion_Congruent_Levers <- 		figure_proportionerrors(rawdata, yvalue10, title10)
Plot_Proportion_InCongruent_Levers <- 	figure_proportionerrors(rawdata, yvalue11, title11)
# # These data are not independent so combining mag and levers not appropriate yet
# Plot_Proportion_visitBothLeversandMag
# Combine relevant plots
Plot_Proportion_visitBothLevers + Plot_Proportion_visitMag
colnames(rawdata)
# Plot Variable
yvalue2 = "prop_Bothlevers"
# Plot data
Plot_Proportion_visitBothLevers <- 		figure_proportionerrors(rawdata, yvalue2, title2)
Plot_Proportion_visitBothLevers
Plot_Proportion_visitMag
yvalue3 = "prop_Mag"
yvalue4 = "prop_Llever"
yvalue5 = "prop_Slever"
yvalue6 = "prop_congruentlever"
yvalue7 = "prop_incongruentlever"
yvalue8 = "prop_totalLever_Llever"
yvalue9 = "prop_totalLever_Slever"
yvalue10 = "prop_totalLever_congruentlever"
yvalue11 = "prop_totalLever_incongruentlever"
# Plot title
title2 = "Both Levers/Total Errors"
title3 = "Magazine/Total Errors"
title4 = "Large Lever/Total Errors"
title5 = "Small Lever/Total Errors"
title6 = "Congruent Lever/Total Errors"
title7 = "Incongruent Lever/Total Errors"
title8 = "Large Lever/Lever Errors"
title9 = "Small Lever/Lever Errors"
title10 = "Congruent Lever/Lever Errors"
title11 = "Incongruent Lever/Lever Errors"
Plot_Proportion_visitBothLevers <- 		figure_proportionerrors(rawdata, yvalue2, title2)
Plot_Proportion_visitMag <- 				figure_proportionerrors(rawdata, yvalue3, title3)
Plot_Proportion_LargeLever_Total <- 		figure_proportionerrors(rawdata, yvalue4, title4)
Plot_Proportion_SmallLever_Total <- 		figure_proportionerrors(rawdata, yvalue5, title5)
Plot_Proportion_Congruent_Total <- 		figure_proportionerrors(rawdata, yvalue6, title6)
Plot_Proportion_InCongruent_Total <- 	figure_proportionerrors(rawdata, yvalue7, title7)
Plot_Proportion_LargeLever_Levers <- 	figure_proportionerrors(rawdata, yvalue8, title8)
Plot_Proportion_SmallLever_Levers <- 	figure_proportionerrors(rawdata, yvalue9, title9)
Plot_Proportion_Congruent_Levers <- 		figure_proportionerrors(rawdata, yvalue10, title10)
Plot_Proportion_InCongruent_Levers <- 	figure_proportionerrors(rawdata, yvalue11, title11)
# # These data are not independent so combining mag and levers not appropriate yet
# Plot_Proportion_visitBothLeversandMag
# Combine relevant plots
Plot_Proportion_visitBothLevers + Plot_Proportion_visitMag
Plot_Proportion_LargeLever_Total + Plot_Proportion_SmallLever_Total + Plot_Proportion_LargeLever_Levers + Plot_Proportion_SmallLever_Levers
Plot_Proportion_Congruent_Total + Plot_Proportion_InCongruent_Total + Plot_Proportion_Congruent_Levers +Plot_Proportion_InCongruent_Levers
view(rawdata)
colnames(rawdata)
model1_bothlevers <- mixed(prop_Bothlevers ~ RewardSize*Drug + (RewardSize+Drug|SubjID),
data = rawdata, family=binomial,
method = "LRT",
weight = TotalTrials)
model1_bothlevers <- mixed(prop_Bothlevers ~ RewardSize*Drug + (RewardSize+Drug|SubjID),
data = rawdata, family=binomial,
method = "LRT",
weight = .$TotalTrials)
model1_bothlevers <- mixed(prop_Bothlevers ~ RewardSize*Drug + (RewardSize+Drug|SubjID),
data = rawdata, family=binomial,
method = "LRT",
weight = rawdata$TotalTrials)
model1_bothlevers <- mixed(prop_Bothlevers ~ RewardSize*Drug + (1+RewardSize+Drug|SubjID),
data = rawdata, family=binomial,
method = "LRT",
weight = rawdata$TotalTrials)
model1_bothlevers <- mixed(prop_Bothlevers ~ RewardSize*Drug + (1+Drug|SubjID),
data = rawdata, family=binomial,
method = "LRT",
weight = rawdata$TotalTrials)
model1_bothlevers <- mixed(prop_Bothlevers ~ RewardSize*Drug + (1+Drug|SubjID),
data = rawdata, family=binomial,
method = "LRT",
weight = rawdata$TotalTrials,
all_fit = TRUE,
cl = cl)
rawdata
model1_bothlevers <- mixed(prop_Bothlevers ~ RewardSize*Drug + (1+Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
weight = rawdata$TotalTrials,
all_fit = TRUE,
cl = cl)
model1_bothlevers <- mixed(prop_Bothlevers ~ RewardSize*Drug + (1+Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
weight = TotalTrials,
all_fit = TRUE,
cl = cl)
model1_bothlevers <- mixed(cbind(Bothlevers,(TotalTrials-Bothlevers)) ~ RewardSize*Drug + (1+Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
model1_bothlevers <- mixed(cbind(Bothlevers,TotalTrials-Bothlevers) ~ RewardSize*Drug + (1+Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
model1_bothlevers <- mixed(cbind(Bothlevers,TotalTrials) ~ RewardSize*Drug + (1+Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
colnames(rawdata)
model1_bothlevers <- mixed(cbind(BothLevers,TotalTrials-BothLevers) ~ RewardSize*Drug + (1+Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model1_mixed_LRT)
nice(model1_bothlevers)
colnames(rawdata)
# Load Data ---------------------------------------------------------------
datafolder <- "rawdata"
filename <- "SKF_errordata.csv"
rawdata <- fread(here(datafolder,filename))
# Add new columns to data  ------------------------------------------------
# Add congruence of lever to trial type
rawdata <- rawdata %>%
mutate(prop_congruentlever = ifelse(RewardSize == "Small", prop_Slever, prop_Llever),
prop_incongruentlever = ifelse(RewardSize == "Small", prop_Llever, prop_Slever),
congruentlever = ifelse(RewardSize == "Small", Slever, Llever),
incongruentlever = ifelse(RewardSize == "Small", Llever, Slever),
prop_totalLever_congruentlever = congruentlever/BothLevers,
prop_totalLever_incongruentlever = incongruentlever/BothLevers,
prop_totalLever_Slever = Slever/BothLevers,
prop_totalLever_Llever = Llever/BothLevers,
not_Slever = TotalTrials - Slever,
not_Llever = TotalTrials - Llever,
not_Middle = TotalTrials - Middle,
not_Mag = TotalTrials - Mag,
not_BothLevers = TotalTrials - BothLevers,
)
model1_bothlevers <- mixed(cbind(BothLevers,not_BothLevers) ~ RewardSize*Drug + (1+Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model1_bothlevers)
model1_bothlevers <- mixed(cbind(BothLevers,not_BothLevers) ~ RewardSize*Drug + (1+RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model1_bothlevers)
emmeans_model1_mixed_LRT <- emmeans(model1_bothlevers, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model1_mixed_LRT$contrasts
library(parallel)
nc <- detectCores() # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
# Analysis approach - start with maximal random effects model and reduce until fit
model2_bothlevers <- mixed(cbind(BothLevers,not_BothLevers) ~ RewardSize*Drug + (1+RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model2_bothlevers)
emmeans_model2_mixed_LRT <- emmeans(model2_bothlevers, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model2_mixed_LRT$contrasts
emmeans_model2_mixed_LRT <- emmeans(model2_bothlevers, pairwise~RewardSize*Drug, adjust = "tukey")
emmeans_model2_mixed_LRT$contrasts
model2_bothlevers <- mixed(cbind(mag,not_mag) ~ RewardSize*Drug + (1+RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
model3_Mag <- mixed(cbind(Mag,not_Mag) ~ RewardSize*Drug + (1+RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model3_Mag)
emmeans_model3_Mag <- emmeans(model3_Mag, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model3_Mag$contrasts
model3_Mag <- mixed(cbind(Mag,not_Mag) ~ RewardSize*Drug + (1|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model3_Mag)
model3_Mag <- mixed(cbind(Mag,not_Mag) ~ RewardSize*Drug + (1 + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model3_Mag)
model3_Mag <- mixed(cbind(Mag,not_Mag) ~ RewardSize*Drug + ( Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model3_Mag)
model3_Mag <- mixed(cbind(Mag,not_Mag) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model3_Mag)
model3_Llever <- mixed(cbind(Llever,not_Llever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model3_Llever)
emmeans_model3_Llever <- emmeans(model3_Llever, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model3_Llever$contrasts
# Analysis 5: Probability of Large Lever ----------------------------------
library(parallel)
nc <- detectCores() # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
# Analysis approach - start with maximal random effects model and reduce until fit
model5_Slever <- mixed(cbind(Slever,not_Slever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model5_Slever)
emmeans_model5_Slever <- emmeans(model5_Slever, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model5_Slever$contrasts
model6_congruentlever <- mixed(cbind(congruentlever,not_congruentlever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
rawdata <- rawdata %>%
mutate(prop_congruentlever = ifelse(RewardSize == "Small", prop_Slever, prop_Llever),
prop_incongruentlever = ifelse(RewardSize == "Small", prop_Llever, prop_Slever),
congruentlever = ifelse(RewardSize == "Small", Slever, Llever),
incongruentlever = ifelse(RewardSize == "Small", Llever, Slever),
prop_totalLever_congruentlever = congruentlever/BothLevers,
prop_totalLever_incongruentlever = incongruentlever/BothLevers,
prop_totalLever_Slever = Slever/BothLevers,
prop_totalLever_Llever = Llever/BothLevers,
not_Slever = TotalTrials - Slever,
not_Llever = TotalTrials - Llever,
not_Middle = TotalTrials - Middle,
not_Mag = TotalTrials - Mag,
not_BothLevers = TotalTrials - BothLevers,
not_congruentlever = TotalTrials - congruentlever,
not_incongruentlever = TotalTrials - incongruentlever)
model6_congruentlever <- mixed(cbind(congruentlever,not_congruentlever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model6_congruentlever)
model6_congruentlever <- mixed(cbind(congruentlever,not_congruentlever) ~ RewardSize*Drug + ( 1 |SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model6_congruentlever)
model7_incongruentlever <- mixed(cbind(incongruentlever,not_incongruentlever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model7_incongruentlever)
emmeans_model7_incongruentlever <- emmeans(model7_incongruentlever, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model7_incongruentlever$contrasts
model7_incongruentlever <- mixed(cbind(incongruentlever,not_incongruentlever) ~ RewardSize*Drug + ( 1 |SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model7_incongruentlever)
model7_incongruentlever <- mixed(cbind(incongruentlever,not_incongruentlever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug||SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model7_incongruentlever)
model7_incongruentlever <- mixed(cbind(incongruentlever,not_incongruentlever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model7_incongruentlever)
nice(model2_bothlevers)
nice(model3_Mag)
nice(model4_Llever)
nice(model5_Slever)
nice(model6_congruentlever)
nice(model7_incongruentlever)
# Analysis 2: Probability of both levers ----------------------------------
library(parallel)
nc <- detectCores() # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
# Analysis approach - start with maximal random effects model and reduce until fit
model2_bothlevers <- mixed(cbind(BothLevers,not_BothLevers) ~ RewardSize*Drug + (1+RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model2_bothlevers)
emmeans_model2_bothlevers <- emmeans(model2_bothlevers, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model2_bothlevers$contrasts
# Analysis 3: Probability of Mag ----------------------------------
library(parallel)
nc <- detectCores() # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
# Analysis approach - start with maximal random effects model and reduce until fit
model3_Mag <- mixed(cbind(Mag,not_Mag) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model3_Mag)
emmeans_model3_Mag <- emmeans(model3_Mag, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model3_Mag$contrasts
# Analysis 4: Probability of Large Lever ----------------------------------
library(parallel)
nc <- detectCores() # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
# Analysis approach - start with maximal random effects model and reduce until fit
model4_Llever <- mixed(cbind(Llever,not_Llever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model4_Llever)
emmeans_model4_Llever <- emmeans(model4_Llever, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model4_Llever$contrasts
# Analysis 5: Probability of Small Lever ----------------------------------
library(parallel)
nc <- detectCores() # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
# Analysis approach - start with maximal random effects model and reduce until fit
model5_Slever <- mixed(cbind(Slever,not_Slever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model5_Slever)
emmeans_model5_Slever <- emmeans(model5_Slever, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model5_Slever$contrasts
# Analysis 6: Probability of COngruent Lever ----------------------------------
library(parallel)
nc <- detectCores() # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
# Analysis approach - start with maximal random effects model and reduce until fit
model6_congruentlever <- mixed(cbind(congruentlever,not_congruentlever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model6_congruentlever)
emmeans_model6_congruentlever <- emmeans(model6_congruentlever, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model6_congruentlever$contrasts
# Analysis 6: Probability of Incongruent Lever ----------------------------------
library(parallel)
nc <- detectCores() # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
# Analysis approach - start with maximal random effects model and reduce until fit
model7_incongruentlever <- mixed(cbind(incongruentlever,not_incongruentlever) ~ RewardSize*Drug + ( 1 + RewardSize + Drug|SubjID),
data = rawdata,
family=binomial,
method = "LRT",
all_fit = TRUE,
cl = cl)
nice(model7_incongruentlever)
emmeans_model7_incongruentlever <- emmeans(model7_incongruentlever, pairwise~RewardSize*Drug, adjust = "tukey", type = "response")
emmeans_model7_incongruentlever$contrasts
nice(model2_bothlevers)
nice(model3_Mag)
nice(model4_Llever)
nice(model5_Slever)
nice(model6_congruentlever)
nice(model7_incongruentlever)
nice(model2_bothlevers)
nice(model3_Mag)
nice(model4_Llever)
nice(model5_Slever)
nice(model6_congruentlever)
nice(model7_incongruentlever)
